{"version":"NotebookV1","origId":2636093781425835,"name":"Spark","language":"python","commands":[{"version":"CommandV1","origId":973434233671807,"guid":"348d273c-0b50-4797-965c-be67a7dd0d99","subtype":"command","commandType":"auto","position":79.25,"command":"%md\n## 11. Window function in Spark\n\nA **window function** looks at a specific set of rows (called a *window*) and calculates something for each row based on that group. Unlike regular group functions (like `SUM` or `AVG`), which give just one result for the entire group, window functions give a result for every row in the group.\n\nFor example: \n\nIf you have a table of employees with their salaries, you could use a window function to calculate the **average salary** of all employees **but still show each individual employee's salary**.\n\n**Syntax:**\n`from pyspark.sql.window import Window`\n\n`window = Window.partitionby(\"col_name)`\n\nThe above syntax will create windows for all the records as per the col_name provided.\n\nKey componenets:\n1. `partitionBy(\"col_name\")` : This is like splitting the data into small, manageable groups based on a specific column.\n2. `orderBy(\"col_name)`: This sorts the rows inside each partition, usually by a specific column.\n3. `window frame`: Defines the specific range of rows to look at for each calculation (e.g., all rows, just the previous row, etc.).\n\nOptions: `UNBOUNDED PRECEDING` | `offset PRECEDING` | `CURRENT ROW` | `offset FOLLOWING` | `UNBOUNDED FOLLOWING`\n\n","commandVersion":57,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"6e78aba8-f53e-479d-b283-03d8f1961198"},{"version":"CommandV1","origId":973434233671808,"guid":"5074079c-16d9-4da5-bedb-70f9e4624d09","subtype":"command","commandType":"auto","position":79.5,"command":"from pyspark.sql.functions import *\nfrom pyspark.sql.types import *","commandVersion":5,"state":"finished","results":{"type":"listResults","data":[],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{"isDbfsCommandResult":false}},"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":1733839094010,"submitTime":1733839093979,"finishTime":1733839094141,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[],"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"a394feaf-6e44-4685-92b9-27c15a6fe181"},{"version":"CommandV1","origId":973434233671809,"guid":"c969efbf-3048-4c97-8ec7-1f32c5c35f03","subtype":"command","commandType":"auto","position":80.75,"command":"# List all column name with one extra column where total salary of each dpt is mentioned\nfrom pyspark.sql.window import Window\n\nwindow = Window.partitionBy(\"department\")\nprint(f\"The windows so created are: \\n {window}\")\n\nemp_df.withColumn(\"total_salary\", sum(col(\"salary\")).over(window)).show(truncate=False)","commandVersion":29,"state":"finished","results":{"type":"listResults","data":[{"type":"ansi","data":"The windows so created are: \n <pyspark.sql.window.WindowSpec object at 0x7f2c26af11f0>\n+---+--------+------+----------+------+------------+\n|id |name    |salary|department|gender|total_salary|\n+---+--------+------+----------+------+------------+\n|1  |manish  |50000 |IT        |m     |345000      |\n|4  |mukesh  |80000 |IT        |m     |345000      |\n|8  |rashi   |100000|IT        |f     |345000      |\n|9  |aditya  |65000 |IT        |m     |345000      |\n|11 |rakhi   |50000 |IT        |f     |345000      |\n|3  |raushan |70000 |marketing |m     |220000      |\n|6  |nikita  |45000 |marketing |f     |220000      |\n|7  |ragini  |55000 |marketing |f     |220000      |\n|10 |rahul   |50000 |marketing |m     |220000      |\n|2  |vikash  |60000 |sales     |m     |240000      |\n|5  |priti   |90000 |sales     |f     |240000      |\n|12 |akhilesh|90000 |sales     |m     |240000      |\n+---+--------+------+----------+------+------------+\n\n","name":"stdout","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{"isDbfsCommandResult":false}},"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":1733839343947,"submitTime":1733839343928,"finishTime":1733839347070,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[["ansi",936]],"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"e31f37b3-0e40-47b2-b859-18214bd3008b"},{"version":"CommandV1","origId":973434233671810,"guid":"fa899e31-8a86-42a1-9f72-5c14a6512b47","subtype":"command","commandType":"auto","position":81.75,"command":"# Give the row no., rank and dense rank for the window in asc order by salary over dept\nwindow = Window.partitionBy(\"department\").orderBy(\"salary\")\n\nemp_df.withColumn(\"row number\", row_number().over(window)).withColumn(\"rank\", rank().over(window)).withColumn(\"dense rank\", dense_rank().over(window)).show(truncate=False)","commandVersion":25,"state":"finished","results":{"type":"listResults","data":[{"type":"ansi","data":"+---+--------+------+----------+------+----------+----+----------+\n|id |name    |salary|department|gender|row number|rank|dense rank|\n+---+--------+------+----------+------+----------+----+----------+\n|1  |manish  |50000 |IT        |m     |1         |1   |1         |\n|11 |rakhi   |50000 |IT        |f     |2         |1   |1         |\n|9  |aditya  |65000 |IT        |m     |3         |3   |2         |\n|4  |mukesh  |80000 |IT        |m     |4         |4   |3         |\n|8  |rashi   |100000|IT        |f     |5         |5   |4         |\n|6  |nikita  |45000 |marketing |f     |1         |1   |1         |\n|10 |rahul   |50000 |marketing |m     |2         |2   |2         |\n|7  |ragini  |55000 |marketing |f     |3         |3   |3         |\n|3  |raushan |70000 |marketing |m     |4         |4   |4         |\n|2  |vikash  |60000 |sales     |m     |1         |1   |1         |\n|5  |priti   |90000 |sales     |f     |2         |2   |2         |\n|12 |akhilesh|90000 |sales     |m     |3         |2   |2         |\n+---+--------+------+----------+------+----------+----+----------+\n\n","name":"stdout","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{"isDbfsCommandResult":false}},"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":1733839946413,"submitTime":1733839946401,"finishTime":1733839948227,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[["ansi",1073]],"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"4cd59e2d-058a-4289-b116-d2e7dba1b2d7"},{"version":"CommandV1","origId":973434233671811,"guid":"d78f87f2-ee82-4eb4-a90d-70a9669962de","subtype":"command","commandType":"auto","position":81.25,"command":"%md\n### Row Number, Rank, Dense Rank\n\nRow Number - Assigns a **unique number** to each row, starting from 1, in the order specified. No ties are allowed; every row gets a different number.\n\nRank - Assigns a rank based on the order, but rows with the **same value (ties) get the same rank**. After ties, the rank **skips numbers**.\n\nDense Rank -  Similar to rank, but it **does not skip numbers after ties**. Rows with the same value still get the same rank.","commandVersion":13,"state":"input","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[],"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"62e7ecf7-058e-4281-bd4e-8a8d6f62b444"},{"version":"CommandV1","origId":973434233671812,"guid":"8449c609-dfea-4115-95cc-d57315d3d944","subtype":"command","commandType":"auto","position":82.75,"command":"# Give the row no., rank and dense rank for the window in asc order by salary, and gender over dept\nwindow = Window.partitionBy(\"department\", \"gender\").orderBy(\"salary\")\n\nemp_df.withColumn(\"row number\", row_number().over(window)).withColumn(\"rank\", rank().over(window)).withColumn(\"dense rank\", dense_rank().over(window)).show(truncate=False)","commandVersion":3,"state":"finished","results":{"type":"listResults","data":[{"type":"ansi","data":"+---+--------+------+----------+------+----------+----+----------+\n|id |name    |salary|department|gender|row number|rank|dense rank|\n+---+--------+------+----------+------+----------+----+----------+\n|11 |rakhi   |50000 |IT        |f     |1         |1   |1         |\n|8  |rashi   |100000|IT        |f     |2         |2   |2         |\n|1  |manish  |50000 |IT        |m     |1         |1   |1         |\n|9  |aditya  |65000 |IT        |m     |2         |2   |2         |\n|4  |mukesh  |80000 |IT        |m     |3         |3   |3         |\n|6  |nikita  |45000 |marketing |f     |1         |1   |1         |\n|7  |ragini  |55000 |marketing |f     |2         |2   |2         |\n|10 |rahul   |50000 |marketing |m     |1         |1   |1         |\n|3  |raushan |70000 |marketing |m     |2         |2   |2         |\n|5  |priti   |90000 |sales     |f     |1         |1   |1         |\n|2  |vikash  |60000 |sales     |m     |1         |1   |1         |\n|12 |akhilesh|90000 |sales     |m     |2         |2   |2         |\n+---+--------+------+----------+------+----------+----+----------+\n\n","name":"stdout","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{"isDbfsCommandResult":false}},"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":1733840063062,"submitTime":1733840063047,"finishTime":1733840064692,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[["ansi",1073]],"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"86ced4d6-cd5e-4e6f-8fba-879b136856fd"},{"version":"CommandV1","origId":973434233671813,"guid":"38cf38f7-bb14-4d41-b828-f2cc0007d33a","subtype":"command","commandType":"auto","position":83.75,"command":"# Calculate the top 2 performers from each dpt\nwindow = Window.partitionBy(\"department\").orderBy(desc(\"salary\"))\n\nemp_df.withColumn(\"Dense Rank\", dense_rank().over(window)).filter(col(\"Dense Rank\") <= 2).show(truncate=False)","commandVersion":24,"state":"finished","results":{"type":"listResults","data":[{"type":"ansi","data":"+---+--------+------+----------+------+----------+\n|id |name    |salary|department|gender|Dense Rank|\n+---+--------+------+----------+------+----------+\n|8  |rashi   |100000|IT        |f     |1         |\n|4  |mukesh  |80000 |IT        |m     |2         |\n|3  |raushan |70000 |marketing |m     |1         |\n|7  |ragini  |55000 |marketing |f     |2         |\n|5  |priti   |90000 |sales     |f     |1         |\n|12 |akhilesh|90000 |sales     |m     |1         |\n|2  |vikash  |60000 |sales     |m     |2         |\n+---+--------+------+----------+------+----------+\n\n","name":"stdout","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{"isDbfsCommandResult":false}},"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":1733840420910,"submitTime":1733840420896,"finishTime":1733840422054,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[["ansi",562]],"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"6885e9ec-b6da-4013-ac82-9527d649c810"},{"version":"CommandV1","origId":973434233671814,"guid":"6449baeb-a4ee-47ee-a38c-85ea8dccf3bf","subtype":"command","commandType":"auto","position":84.75,"command":"product_data = [\n(1,\"iphone\",\"01-01-2023\",1500000),\n(2,\"samsung\",\"01-01-2023\",1100000),\n(3,\"oneplus\",\"01-01-2023\",1100000),\n(1,\"iphone\",\"01-02-2023\",1300000),\n(2,\"samsung\",\"01-02-2023\",1120000),\n(3,\"oneplus\",\"01-02-2023\",1120000),\n(1,\"iphone\",\"01-03-2023\",1600000),\n(2,\"samsung\",\"01-03-2023\",1080000),\n(3,\"oneplus\",\"01-03-2023\",1160000),\n(1,\"iphone\",\"01-04-2023\",1700000),\n(2,\"samsung\",\"01-04-2023\",1800000),\n(3,\"oneplus\",\"01-04-2023\",1170000),\n(1,\"iphone\",\"01-05-2023\",1200000),\n(2,\"samsung\",\"01-05-2023\",980000),\n(3,\"oneplus\",\"01-05-2023\",1175000),\n(1,\"iphone\",\"01-06-2023\",1100000),\n(2,\"samsung\",\"01-06-2023\",1100000),\n(3,\"oneplus\",\"01-06-2023\",1200000)\n]\n\n\nproduct_df = spark.createDataFrame(product_data, ['product_id', 'product_name', 'sales_date', 'sales'])\nproduct_df.show()","commandVersion":17,"state":"finished","results":{"type":"listResults","data":[{"type":"ansi","data":"+----------+------------+----------+-------+\n|product_id|product_name|sales_date|  sales|\n+----------+------------+----------+-------+\n|         1|      iphone|01-01-2023|1500000|\n|         2|     samsung|01-01-2023|1100000|\n|         3|     oneplus|01-01-2023|1100000|\n|         1|      iphone|01-02-2023|1300000|\n|         2|     samsung|01-02-2023|1120000|\n|         3|     oneplus|01-02-2023|1120000|\n|         1|      iphone|01-03-2023|1600000|\n|         2|     samsung|01-03-2023|1080000|\n|         3|     oneplus|01-03-2023|1160000|\n|         1|      iphone|01-04-2023|1700000|\n|         2|     samsung|01-04-2023|1800000|\n|         3|     oneplus|01-04-2023|1170000|\n|         1|      iphone|01-05-2023|1200000|\n|         2|     samsung|01-05-2023| 980000|\n|         3|     oneplus|01-05-2023|1175000|\n|         1|      iphone|01-06-2023|1100000|\n|         2|     samsung|01-06-2023|1100000|\n|         3|     oneplus|01-06-2023|1200000|\n+----------+------------+----------+-------+\n\n","name":"stdout","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[{"name":"product_df","typeStr":"pyspark.sql.dataframe.DataFrame","schema":{"fields":[{"metadata":{},"name":"product_id","nullable":true,"type":"long"},{"metadata":{},"name":"product_name","nullable":true,"type":"string"},{"metadata":{},"name":"sales_date","nullable":true,"type":"string"},{"metadata":{},"name":"sales","nullable":true,"type":"long"}],"type":"struct"},"tableIdentifier":null}],"metadata":{"isDbfsCommandResult":false}},"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":1733841544751,"submitTime":1733841544683,"finishTime":1733841546141,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[["ansi",991]],"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"0def000c-4ce0-487e-91f0-57733dcbab0c"},{"version":"CommandV1","origId":973434233671815,"guid":"9b6c26c8-ab1b-4506-b647-4ff26c425066","subtype":"command","commandType":"auto","position":84.25,"command":"%md\n### Lead and Lag in Spark\n\n- **Lead**: Fetches the value from the **next row** in the same column within a partition.  \n- **Lag**: Fetches the value from the **previous row** in the same column within a partition.  ","commandVersion":4,"state":"input","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[],"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"baad355e-8d2c-4853-95c0-0893750a0bc5"},{"version":"CommandV1","origId":973434233671816,"guid":"e8b16cb0-f877-488f-9e9f-4d2251b2f69b","subtype":"command","commandType":"auto","position":85.75,"command":"# list the %age of loss/gain based on previous months sale\n\nwindow = Window.partitionBy(\"product_name\").orderBy('sales_date')\n\nproduct_df.withColumn('previous_month_sale', lag(col('sales'), 1).over(window))\\\n          .withColumn('percentage_loss_gain', round((col('sales') - col('previous_month_sale')) * 100 / col('sales'), 2))\\\n          .show(truncate=False)","commandVersion":35,"state":"finished","results":{"type":"listResults","data":[{"type":"ansi","data":"+----------+------------+----------+-------+-------------------+--------------------+\n|product_id|product_name|sales_date|sales  |previous_month_sale|percentage_loss_gain|\n+----------+------------+----------+-------+-------------------+--------------------+\n|1         |iphone      |01-01-2023|1500000|null               |null                |\n|1         |iphone      |01-02-2023|1300000|1500000            |-15.38              |\n|1         |iphone      |01-03-2023|1600000|1300000            |18.75               |\n|1         |iphone      |01-04-2023|1700000|1600000            |5.88                |\n|1         |iphone      |01-05-2023|1200000|1700000            |-41.67              |\n|1         |iphone      |01-06-2023|1100000|1200000            |-9.09               |\n|3         |oneplus     |01-01-2023|1100000|null               |null                |\n|3         |oneplus     |01-02-2023|1120000|1100000            |1.79                |\n|3         |oneplus     |01-03-2023|1160000|1120000            |3.45                |\n|3         |oneplus     |01-04-2023|1170000|1160000            |0.85                |\n|3         |oneplus     |01-05-2023|1175000|1170000            |0.43                |\n|3         |oneplus     |01-06-2023|1200000|1175000            |2.08                |\n|2         |samsung     |01-01-2023|1100000|null               |null                |\n|2         |samsung     |01-02-2023|1120000|1100000            |1.79                |\n|2         |samsung     |01-03-2023|1080000|1120000            |-3.7                |\n|2         |samsung     |01-04-2023|1800000|1080000            |40.0                |\n|2         |samsung     |01-05-2023|980000 |1800000            |-83.67              |\n|2         |samsung     |01-06-2023|1100000|980000             |10.91               |\n+----------+------------+----------+-------+-------------------+--------------------+\n\n","name":"stdout","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{"isDbfsCommandResult":false}},"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":1733841872850,"submitTime":1733841872816,"finishTime":1733841873954,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[["ansi",1893]],"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"459e1996-e0f9-4d15-ba96-bfb6793ec6fd"},{"version":"CommandV1","origId":973434233671817,"guid":"040963f3-d3bd-47c5-9e70-739104fcd4a9","subtype":"command","commandType":"auto","position":86.75,"command":"# Data for Question 1\nproduct_data = [\n(2,\"samsung\",\"01-01-1995\",11000),\n(1,\"iphone\",\"01-02-2023\",1300000),\n(2,\"samsung\",\"01-02-2023\",1120000),\n(3,\"oneplus\",\"01-02-2023\",1120000),\n(1,\"iphone\",\"01-03-2023\",1600000),\n(2,\"samsung\",\"01-03-2023\",1080000),\n(3,\"oneplus\",\"01-03-2023\",1160000),\n(1,\"iphone\",\"01-01-2006\",15000),\n(1,\"iphone\",\"01-04-2023\",1700000),\n(2,\"samsung\",\"01-04-2023\",1800000),\n(3,\"oneplus\",\"01-04-2023\",1170000),\n(1,\"iphone\",\"01-05-2023\",1200000),\n(2,\"samsung\",\"01-05-2023\",980000),\n(3,\"oneplus\",\"01-05-2023\",1175000),\n(1,\"iphone\",\"01-06-2023\",1100000),\n(3,\"oneplus\",\"01-01-2010\",23000),\n(2,\"samsung\",\"01-06-2023\",1100000),\n(3,\"oneplus\",\"01-06-2023\",1200000)\n]\n\nproduct_schema=[\"product_id\",\"product_name\",\"sales_date\",\"sales\"]\n\nproduct_df = spark.createDataFrame(data=product_data,schema=product_schema)\n\nproduct_df.show() ","commandVersion":3,"state":"finished","results":{"type":"listResults","data":[{"type":"ansi","data":"+----------+------------+----------+-------+\n|product_id|product_name|sales_date|  sales|\n+----------+------------+----------+-------+\n|         2|     samsung|01-01-1995|  11000|\n|         1|      iphone|01-02-2023|1300000|\n|         2|     samsung|01-02-2023|1120000|\n|         3|     oneplus|01-02-2023|1120000|\n|         1|      iphone|01-03-2023|1600000|\n|         2|     samsung|01-03-2023|1080000|\n|         3|     oneplus|01-03-2023|1160000|\n|         1|      iphone|01-01-2006|  15000|\n|         1|      iphone|01-04-2023|1700000|\n|         2|     samsung|01-04-2023|1800000|\n|         3|     oneplus|01-04-2023|1170000|\n|         1|      iphone|01-05-2023|1200000|\n|         2|     samsung|01-05-2023| 980000|\n|         3|     oneplus|01-05-2023|1175000|\n|         1|      iphone|01-06-2023|1100000|\n|         3|     oneplus|01-01-2010|  23000|\n|         2|     samsung|01-06-2023|1100000|\n|         3|     oneplus|01-06-2023|1200000|\n+----------+------------+----------+-------+\n\n","name":"stdout","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[{"name":"product_df","typeStr":"pyspark.sql.dataframe.DataFrame","schema":{"fields":[{"metadata":{},"name":"product_id","nullable":true,"type":"long"},{"metadata":{},"name":"product_name","nullable":true,"type":"string"},{"metadata":{},"name":"sales_date","nullable":true,"type":"string"},{"metadata":{},"name":"sales","nullable":true,"type":"long"}],"type":"struct"},"tableIdentifier":null}],"metadata":{"isDbfsCommandResult":false}},"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":1733842058306,"submitTime":1733842058286,"finishTime":1733842059424,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[["ansi",991]],"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"dab4da74-e2a8-4f67-8b8b-be37f822090c"},{"version":"CommandV1","origId":973434233671818,"guid":"49907e34-a5f2-48c7-ae04-99f976f97908","subtype":"command","commandType":"auto","position":86.25,"command":"%md\n### `Rows Between` and `Rows Between` in Spark\n\n* They solve the issues which are not solvable by Lead, Lag, Row number, Rank, Dense Rank\n\nQuestions-\n1. Find out the difference in sales, of each product from their first month sales to latest month\n2. Send a mail to all the employees who have not completed 8 hours in office when they work from office\n3. Find out the performance of sales based on last 3 months average\n\n* **`UNBOUNDED_PRECEDING`** (**default**) - Refers to the first row in the partition, regardless of its position.\n\nSyntax: `.rowsBetween(Window.unboundedPreceding, Window.currentRow)`\n\n* **`UNBOUNDED FOLLOWING`** - Refers to the last row in the partition, regardless of its position.\n\nSyntax: `.rowsBetween(Window.currentRow, Window.unboundedFollowing)`\n\n* **`CURRENT ROW`** - Refers to the row being processed at the moment.\n\nSyntax: `.rowsBetween(Window.currentRow, Window.currentRow)`\n\n* **`ROWS BETWEEN`** - Defines a fixed range of rows to include around the current row based on row positions.\n\nSyntax: `.rowsBetween(start_offset, end_offset)`\n\n* **`RANGE BETWEEN`** - Defines a range of values (e.g., time or scores) to include around the current row based on ordered values.\n\nSyntax: `.rangeBetween(Window.unboundedPreceding, Window.currentRow)`\n\n\n**Note: ** For debugging and knowing the physical plan, we can use **`.explain()`** after the query.","commandVersion":111,"state":"input","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[],"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"a90583f7-b647-4bec-8872-a94b1ad65d17"},{"version":"CommandV1","origId":973434233671819,"guid":"efd967e2-3f6b-4a6c-8f99-d94f031528e4","subtype":"command","commandType":"auto","position":87.75,"command":"# 1. Find out the difference in sales, of each product from their first month sales to latest month\nwindow = Window.partitionBy(\"product_name\").orderBy(\"sales_date\").rowsBetween(Window.unboundedPreceding, Window.unboundedFollowing)\n\nproduct_df.withColumn(\"first_month_sale\", first(col(\"sales\")).over(window))\\\n          .withColumn(\"latest_month_sale\", last(col(\"sales\")).over(window))\\\n          .withColumn(\"latest_minus_first_month_sales\", col(\"latest_month_sale\") - col(\"first_month_sale\"))\\\n          .select(\"product_id\",\"product_name\", \"latest_minus_first_month_sales\").distinct().show()","commandVersion":111,"state":"finished","results":{"type":"listResults","data":[{"type":"ansi","data":"+----------+------------+------------------------------+\n|product_id|product_name|latest_minus_first_month_sales|\n+----------+------------+------------------------------+\n|         1|      iphone|                       1085000|\n|         3|     oneplus|                       1177000|\n|         2|     samsung|                       1089000|\n+----------+------------+------------------------------+\n\n","name":"stdout","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{"isDbfsCommandResult":false}},"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":1733844777577,"submitTime":1733844777543,"finishTime":1733844778588,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[["ansi",400]],"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"dc6746d8-9264-4807-9b45-fb43edc0a54e"},{"version":"CommandV1","origId":973434233671820,"guid":"4ba4fb5a-d0dd-42bc-97ab-c07978ff3a52","subtype":"command","commandType":"auto","position":88.75,"command":"# Data for Question 2\nemp_data = [(1,\"manish\",\"11-07-2023\",\"10:20\"),\n        (1,\"manish\",\"11-07-2023\",\"11:20\"),\n        (2,\"rajesh\",\"11-07-2023\",\"11:20\"),\n        (1,\"manish\",\"11-07-2023\",\"11:50\"),\n        (2,\"rajesh\",\"11-07-2023\",\"13:20\"),\n        (1,\"manish\",\"11-07-2023\",\"19:20\"),\n        (2,\"rajesh\",\"11-07-2023\",\"17:20\"),\n        (1,\"manish\",\"12-07-2023\",\"10:32\"),\n        (1,\"manish\",\"12-07-2023\",\"12:20\"),\n        (3,\"vikash\",\"12-07-2023\",\"09:12\"),\n        (1,\"manish\",\"12-07-2023\",\"16:23\"),\n        (3,\"vikash\",\"12-07-2023\",\"18:08\")]\n\nemp_schema = [\"id\", \"name\", \"date\", \"time\"]\nemp_df = spark.createDataFrame(data=emp_data, schema=emp_schema)\n\nemp_df.show()","commandVersion":3,"state":"finished","results":{"type":"listResults","data":[{"type":"ansi","data":"+---+------+----------+-----+\n| id|  name|      date| time|\n+---+------+----------+-----+\n|  1|manish|11-07-2023|10:20|\n|  1|manish|11-07-2023|11:20|\n|  2|rajesh|11-07-2023|11:20|\n|  1|manish|11-07-2023|11:50|\n|  2|rajesh|11-07-2023|13:20|\n|  1|manish|11-07-2023|19:20|\n|  2|rajesh|11-07-2023|17:20|\n|  1|manish|12-07-2023|10:32|\n|  1|manish|12-07-2023|12:20|\n|  3|vikash|12-07-2023|09:12|\n|  1|manish|12-07-2023|16:23|\n|  3|vikash|12-07-2023|18:08|\n+---+------+----------+-----+\n\n","name":"stdout","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[{"name":"emp_df","typeStr":"pyspark.sql.dataframe.DataFrame","schema":{"fields":[{"metadata":{},"name":"id","nullable":true,"type":"long"},{"metadata":{},"name":"name","nullable":true,"type":"string"},{"metadata":{},"name":"date","nullable":true,"type":"string"},{"metadata":{},"name":"time","nullable":true,"type":"string"}],"type":"struct"},"tableIdentifier":null}],"metadata":{"isDbfsCommandResult":false}},"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":1733847330395,"submitTime":1733847330351,"finishTime":1733847331612,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[["ansi",481]],"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"7d06f602-3859-4e7a-a4ca-26d6d4945635"},{"version":"CommandV1","origId":973434233671821,"guid":"4b7da5a9-2731-41bc-aa91-60d91edd10d9","subtype":"command","commandType":"auto","position":89.75,"command":"# 2. Send a mail to all the employees who have not completed 8 hours in office when they work from office\n\n# First we need to add a column for unix timestamp so that we can +/-, etc\nemp_df = emp_df.withColumn(\"timestamp\", from_unixtime(unix_timestamp(expr(\"CONCAT(date, ' ', time)\"), \"dd-MM-yyyy HH:mm\")))\n\nemp_df.show()","commandVersion":24,"state":"finished","results":{"type":"listResults","data":[{"type":"ansi","data":"+---+------+----------+-----+-------------------+\n| id|  name|      date| time|          timestamp|\n+---+------+----------+-----+-------------------+\n|  1|manish|11-07-2023|10:20|2023-07-11 10:20:00|\n|  1|manish|11-07-2023|11:20|2023-07-11 11:20:00|\n|  2|rajesh|11-07-2023|11:20|2023-07-11 11:20:00|\n|  1|manish|11-07-2023|11:50|2023-07-11 11:50:00|\n|  2|rajesh|11-07-2023|13:20|2023-07-11 13:20:00|\n|  1|manish|11-07-2023|19:20|2023-07-11 19:20:00|\n|  2|rajesh|11-07-2023|17:20|2023-07-11 17:20:00|\n|  1|manish|12-07-2023|10:32|2023-07-12 10:32:00|\n|  1|manish|12-07-2023|12:20|2023-07-12 12:20:00|\n|  3|vikash|12-07-2023|09:12|2023-07-12 09:12:00|\n|  1|manish|12-07-2023|16:23|2023-07-12 16:23:00|\n|  3|vikash|12-07-2023|18:08|2023-07-12 18:08:00|\n+---+------+----------+-----+-------------------+\n\n","name":"stdout","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[{"name":"emp_df","typeStr":"pyspark.sql.dataframe.DataFrame","schema":{"fields":[{"metadata":{},"name":"id","nullable":true,"type":"long"},{"metadata":{},"name":"name","nullable":true,"type":"string"},{"metadata":{},"name":"date","nullable":true,"type":"string"},{"metadata":{},"name":"time","nullable":true,"type":"string"},{"metadata":{},"name":"timestamp","nullable":true,"type":"string"}],"type":"struct"},"tableIdentifier":null}],"metadata":{"isDbfsCommandResult":false}},"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":1733847578145,"submitTime":1733847578131,"finishTime":1733847579393,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[["ansi",801]],"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"8d0438af-f308-4bdc-aa18-9d55f8a8628b"},{"version":"CommandV1","origId":973434233671822,"guid":"30a2e7b0-0b34-46a4-9773-6766f1ded464","subtype":"command","commandType":"auto","position":90.75,"command":"window = Window.partitionBy('id', 'date').orderBy('date').rowsBetween(Window.unboundedPreceding, Window.unboundedFollowing)\n\nnew_df = emp_df.withColumn('login', first('timestamp').over(window))\\\n               .withColumn('logout', last('timestamp').over(window))\\\n               .withColumn('login', to_timestamp('login', 'yyyy-MM-dd HH:mm:ss'))\\\n               .withColumn('logout', to_timestamp('logout', 'yyyy-MM-dd HH:mm:ss'))\\\n                .withColumn(\"total_time_seconds\", (unix_timestamp('logout') - unix_timestamp('login')))\\\n               .withColumn(\"total_time_hours\", round(col(\"total_time_seconds\") / 3600, 2))\n\nnew_df.show(truncate=False)","commandVersion":78,"state":"finished","results":{"type":"listResults","data":[{"type":"ansi","data":"+---+------+----------+-----+-------------------+-------------------+-------------------+------------------+----------------+\n|id |name  |date      |time |timestamp          |login              |logout             |total_time_seconds|total_time_hours|\n+---+------+----------+-----+-------------------+-------------------+-------------------+------------------+----------------+\n|1  |manish|11-07-2023|10:20|2023-07-11 10:20:00|2023-07-11 10:20:00|2023-07-11 19:20:00|32400             |9.0             |\n|1  |manish|11-07-2023|11:20|2023-07-11 11:20:00|2023-07-11 10:20:00|2023-07-11 19:20:00|32400             |9.0             |\n|1  |manish|11-07-2023|11:50|2023-07-11 11:50:00|2023-07-11 10:20:00|2023-07-11 19:20:00|32400             |9.0             |\n|1  |manish|11-07-2023|19:20|2023-07-11 19:20:00|2023-07-11 10:20:00|2023-07-11 19:20:00|32400             |9.0             |\n|1  |manish|12-07-2023|10:32|2023-07-12 10:32:00|2023-07-12 10:32:00|2023-07-12 16:23:00|21060             |5.85            |\n|1  |manish|12-07-2023|12:20|2023-07-12 12:20:00|2023-07-12 10:32:00|2023-07-12 16:23:00|21060             |5.85            |\n|1  |manish|12-07-2023|16:23|2023-07-12 16:23:00|2023-07-12 10:32:00|2023-07-12 16:23:00|21060             |5.85            |\n|2  |rajesh|11-07-2023|11:20|2023-07-11 11:20:00|2023-07-11 11:20:00|2023-07-11 17:20:00|21600             |6.0             |\n|2  |rajesh|11-07-2023|13:20|2023-07-11 13:20:00|2023-07-11 11:20:00|2023-07-11 17:20:00|21600             |6.0             |\n|2  |rajesh|11-07-2023|17:20|2023-07-11 17:20:00|2023-07-11 11:20:00|2023-07-11 17:20:00|21600             |6.0             |\n|3  |vikash|12-07-2023|09:12|2023-07-12 09:12:00|2023-07-12 09:12:00|2023-07-12 18:08:00|32160             |8.93            |\n|3  |vikash|12-07-2023|18:08|2023-07-12 18:08:00|2023-07-12 09:12:00|2023-07-12 18:08:00|32160             |8.93            |\n+---+------+----------+-----+-------------------+-------------------+-------------------+------------------+----------------+\n\n","name":"stdout","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[{"name":"new_df","typeStr":"pyspark.sql.dataframe.DataFrame","schema":{"fields":[{"metadata":{},"name":"id","nullable":true,"type":"long"},{"metadata":{},"name":"name","nullable":true,"type":"string"},{"metadata":{},"name":"date","nullable":true,"type":"string"},{"metadata":{},"name":"time","nullable":true,"type":"string"},{"metadata":{},"name":"timestamp","nullable":true,"type":"string"},{"metadata":{},"name":"login","nullable":true,"type":"timestamp"},{"metadata":{},"name":"logout","nullable":true,"type":"timestamp"},{"metadata":{},"name":"total_time_seconds","nullable":true,"type":"long"},{"metadata":{},"name":"total_time_hours","nullable":true,"type":"double"}],"type":"struct"},"tableIdentifier":null}],"metadata":{"isDbfsCommandResult":false}},"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":1733848528421,"submitTime":1733848528363,"finishTime":1733848529676,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[["ansi",2017]],"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"c5e546ce-a732-4966-8c59-fbfa7d1ccd22"},{"version":"CommandV1","origId":973434233671823,"guid":"d9bf38c2-92a5-474d-90c9-a5617f39a968","subtype":"command","commandType":"auto","position":91.75,"command":"mailing_list = new_df.filter(col('total_time_hours') < 8).select(\"id\", \"name\", \"date\", \"total_time_hours\").distinct()\nmailing_list.show()","commandVersion":18,"state":"finished","results":{"type":"listResults","data":[{"type":"ansi","data":"+---+------+----------+----------------+\n| id|  name|      date|total_time_hours|\n+---+------+----------+----------------+\n|  1|manish|12-07-2023|            5.85|\n|  2|rajesh|11-07-2023|             6.0|\n+---+------+----------+----------------+\n\n","name":"stdout","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[{"name":"mailing_list","typeStr":"pyspark.sql.dataframe.DataFrame","schema":{"fields":[{"metadata":{},"name":"id","nullable":true,"type":"long"},{"metadata":{},"name":"name","nullable":true,"type":"string"},{"metadata":{},"name":"date","nullable":true,"type":"string"},{"metadata":{},"name":"total_time_hours","nullable":true,"type":"double"}],"type":"struct"},"tableIdentifier":null}],"metadata":{"isDbfsCommandResult":false}},"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":1733848631728,"submitTime":1733848631714,"finishTime":1733848632821,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[["ansi",247]],"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"f08ecff0-1078-4b4b-8332-9351a95f5ede"},{"version":"CommandV1","origId":973434233671825,"guid":"3a4ddda2-83fd-4649-9acb-402ea8d15a61","subtype":"command","commandType":"auto","position":92.75,"command":"# Question 3 Data\nproduct_data = [\n(1,\"iphone\",\"01-01-2023\",1500000),\n(2,\"samsung\",\"01-01-2023\",1100000),\n(3,\"oneplus\",\"01-01-2023\",1100000),\n(1,\"iphone\",\"01-02-2023\",1300000),\n(2,\"samsung\",\"01-02-2023\",1120000),\n(3,\"oneplus\",\"01-02-2023\",1120000),\n(1,\"iphone\",\"01-03-2023\",1600000),\n(2,\"samsung\",\"01-03-2023\",1080000),\n(3,\"oneplus\",\"01-03-2023\",1160000),\n(1,\"iphone\",\"01-04-2023\",1700000),\n(2,\"samsung\",\"01-04-2023\",1800000),\n(3,\"oneplus\",\"01-04-2023\",1170000),\n(1,\"iphone\",\"01-05-2023\",1200000),\n(2,\"samsung\",\"01-05-2023\",980000),\n(3,\"oneplus\",\"01-05-2023\",1175000),\n(1,\"iphone\",\"01-06-2023\",1100000),\n(2,\"samsung\",\"01-06-2023\",1100000),\n(3,\"oneplus\",\"01-06-2023\",1200000)\n]\n\nproduct_schema=[\"product_id\",\"product_name\",\"sales_date\",\"sales\"]\n\nproduct_df = spark.createDataFrame(data=product_data,schema=product_schema)\n\nproduct_df.show()","commandVersion":2,"state":"finished","results":{"type":"listResults","data":[{"type":"ansi","data":"+----------+------------+----------+-------+\n|product_id|product_name|sales_date|  sales|\n+----------+------------+----------+-------+\n|         1|      iphone|01-01-2023|1500000|\n|         2|     samsung|01-01-2023|1100000|\n|         3|     oneplus|01-01-2023|1100000|\n|         1|      iphone|01-02-2023|1300000|\n|         2|     samsung|01-02-2023|1120000|\n|         3|     oneplus|01-02-2023|1120000|\n|         1|      iphone|01-03-2023|1600000|\n|         2|     samsung|01-03-2023|1080000|\n|         3|     oneplus|01-03-2023|1160000|\n|         1|      iphone|01-04-2023|1700000|\n|         2|     samsung|01-04-2023|1800000|\n|         3|     oneplus|01-04-2023|1170000|\n|         1|      iphone|01-05-2023|1200000|\n|         2|     samsung|01-05-2023| 980000|\n|         3|     oneplus|01-05-2023|1175000|\n|         1|      iphone|01-06-2023|1100000|\n|         2|     samsung|01-06-2023|1100000|\n|         3|     oneplus|01-06-2023|1200000|\n+----------+------------+----------+-------+\n\n","name":"stdout","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[{"name":"product_df","typeStr":"pyspark.sql.dataframe.DataFrame","schema":{"fields":[{"metadata":{},"name":"product_id","nullable":true,"type":"long"},{"metadata":{},"name":"product_name","nullable":true,"type":"string"},{"metadata":{},"name":"sales_date","nullable":true,"type":"string"},{"metadata":{},"name":"sales","nullable":true,"type":"long"}],"type":"struct"},"tableIdentifier":null}],"metadata":{"isDbfsCommandResult":false}},"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":1733851621851,"submitTime":1733851621839,"finishTime":1733851622511,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[["ansi",991]],"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"c284bdbf-5791-40ed-9828-73e671bd9a20"},{"version":"CommandV1","origId":973434233671826,"guid":"82e6a8e4-000a-4e7a-8d46-e9b5f4fdb401","subtype":"command","commandType":"auto","position":93.75,"command":"# 3. Find out the performance of sales based on last 3 months average\n# Note: We need to drop the data of January and February beacuse we want the last 3 months average\n\n# Define the window spec to look at the last 2 rows (including current row)\nwindow = Window.partitionBy(\"product_id\").orderBy(\"sales_date\").rowsBetween(-2, 0)\n\nproduct_df = product_df.withColumn(\"running_sum\", sum(\"sales\").over(window))\\\n                    \nproduct_df.show()","commandVersion":130,"state":"finished","results":{"type":"listResults","data":[{"type":"ansi","data":"+----------+------------+----------+-------+-----------+\n|product_id|product_name|sales_date|  sales|running_sum|\n+----------+------------+----------+-------+-----------+\n|         1|      iphone|01-01-2023|1500000|    1500000|\n|         1|      iphone|01-02-2023|1300000|    2800000|\n|         1|      iphone|01-03-2023|1600000|    4400000|\n|         1|      iphone|01-04-2023|1700000|    4600000|\n|         1|      iphone|01-05-2023|1200000|    4500000|\n|         1|      iphone|01-06-2023|1100000|    4000000|\n|         2|     samsung|01-01-2023|1100000|    1100000|\n|         2|     samsung|01-02-2023|1120000|    2220000|\n|         2|     samsung|01-03-2023|1080000|    3300000|\n|         2|     samsung|01-04-2023|1800000|    4000000|\n|         2|     samsung|01-05-2023| 980000|    3860000|\n|         2|     samsung|01-06-2023|1100000|    3880000|\n|         3|     oneplus|01-01-2023|1100000|    1100000|\n|         3|     oneplus|01-02-2023|1120000|    2220000|\n|         3|     oneplus|01-03-2023|1160000|    3380000|\n|         3|     oneplus|01-04-2023|1170000|    3450000|\n|         3|     oneplus|01-05-2023|1175000|    3505000|\n|         3|     oneplus|01-06-2023|1200000|    3545000|\n+----------+------------+----------+-------+-----------+\n\n","name":"stdout","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[{"name":"product_df","typeStr":"pyspark.sql.dataframe.DataFrame","schema":{"fields":[{"metadata":{},"name":"product_id","nullable":true,"type":"long"},{"metadata":{},"name":"product_name","nullable":true,"type":"string"},{"metadata":{},"name":"sales_date","nullable":true,"type":"string"},{"metadata":{},"name":"sales","nullable":true,"type":"long"},{"metadata":{},"name":"running_sum","nullable":true,"type":"long"}],"type":"struct"},"tableIdentifier":null}],"metadata":{"isDbfsCommandResult":false}},"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":1733851743475,"submitTime":1733851743462,"finishTime":1733851744423,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[["ansi",1255]],"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"7e94a467-df00-4aaa-a0b7-c5ae9400bd98"},{"version":"CommandV1","origId":973434233671828,"guid":"6ea9bd24-d662-45f7-aa68-d5d2086c629a","subtype":"command","commandType":"auto","position":95.75,"command":"product_df = product_df.withColumn(\"row_number\", row_number().over(Window.partitionBy(\"product_id\").orderBy(\"sales_date\")))\nproduct_df.show()","commandVersion":25,"state":"finished","results":{"type":"listResults","data":[{"type":"ansi","data":"+----------+------------+----------+-------+-----------+----------+\n|product_id|product_name|sales_date|  sales|running_sum|row_number|\n+----------+------------+----------+-------+-----------+----------+\n|         1|      iphone|01-01-2023|1500000|    1500000|         1|\n|         1|      iphone|01-02-2023|1300000|    2800000|         2|\n|         1|      iphone|01-03-2023|1600000|    4400000|         3|\n|         1|      iphone|01-04-2023|1700000|    4600000|         4|\n|         1|      iphone|01-05-2023|1200000|    4500000|         5|\n|         1|      iphone|01-06-2023|1100000|    4000000|         6|\n|         2|     samsung|01-01-2023|1100000|    1100000|         1|\n|         2|     samsung|01-02-2023|1120000|    2220000|         2|\n|         2|     samsung|01-03-2023|1080000|    3300000|         3|\n|         2|     samsung|01-04-2023|1800000|    4000000|         4|\n|         2|     samsung|01-05-2023| 980000|    3860000|         5|\n|         2|     samsung|01-06-2023|1100000|    3880000|         6|\n|         3|     oneplus|01-01-2023|1100000|    1100000|         1|\n|         3|     oneplus|01-02-2023|1120000|    2220000|         2|\n|         3|     oneplus|01-03-2023|1160000|    3380000|         3|\n|         3|     oneplus|01-04-2023|1170000|    3450000|         4|\n|         3|     oneplus|01-05-2023|1175000|    3505000|         5|\n|         3|     oneplus|01-06-2023|1200000|    3545000|         6|\n+----------+------------+----------+-------+-----------+----------+\n\n","name":"stdout","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[{"name":"product_df","typeStr":"pyspark.sql.dataframe.DataFrame","schema":{"fields":[{"metadata":{},"name":"product_id","nullable":true,"type":"long"},{"metadata":{},"name":"product_name","nullable":true,"type":"string"},{"metadata":{},"name":"sales_date","nullable":true,"type":"string"},{"metadata":{},"name":"sales","nullable":true,"type":"long"},{"metadata":{},"name":"running_sum","nullable":true,"type":"long"},{"metadata":{},"name":"row_number","nullable":false,"type":"integer"}],"type":"struct"},"tableIdentifier":null}],"metadata":{"isDbfsCommandResult":false}},"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":1733851776987,"submitTime":1733851776977,"finishTime":1733851777678,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[["ansi",1497]],"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"9e1e3840-9964-43c8-b3f6-5cb63086ad5c"},{"version":"CommandV1","origId":973434233671829,"guid":"d36d3bcd-83db-4c5d-be61-93ad30a4abe6","subtype":"command","commandType":"auto","position":96.75,"command":"product_df = product_df.filter(col(\"row_number\") > 2)\n\nproduct_df.show()\n","commandVersion":12,"state":"finished","results":{"type":"listResults","data":[{"type":"ansi","data":"+----------+------------+----------+-------+-----------+----------+\n|product_id|product_name|sales_date|  sales|running_sum|row_number|\n+----------+------------+----------+-------+-----------+----------+\n|         1|      iphone|01-03-2023|1600000|    4400000|         3|\n|         1|      iphone|01-04-2023|1700000|    4600000|         4|\n|         1|      iphone|01-05-2023|1200000|    4500000|         5|\n|         1|      iphone|01-06-2023|1100000|    4000000|         6|\n|         2|     samsung|01-03-2023|1080000|    3300000|         3|\n|         2|     samsung|01-04-2023|1800000|    4000000|         4|\n|         2|     samsung|01-05-2023| 980000|    3860000|         5|\n|         2|     samsung|01-06-2023|1100000|    3880000|         6|\n|         3|     oneplus|01-03-2023|1160000|    3380000|         3|\n|         3|     oneplus|01-04-2023|1170000|    3450000|         4|\n|         3|     oneplus|01-05-2023|1175000|    3505000|         5|\n|         3|     oneplus|01-06-2023|1200000|    3545000|         6|\n+----------+------------+----------+-------+-----------+----------+\n\n","name":"stdout","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[{"name":"product_df","typeStr":"pyspark.sql.dataframe.DataFrame","schema":{"fields":[{"metadata":{},"name":"product_id","nullable":true,"type":"long"},{"metadata":{},"name":"product_name","nullable":true,"type":"string"},{"metadata":{},"name":"sales_date","nullable":true,"type":"string"},{"metadata":{},"name":"sales","nullable":true,"type":"long"},{"metadata":{},"name":"running_sum","nullable":true,"type":"long"},{"metadata":{},"name":"row_number","nullable":false,"type":"integer"}],"type":"struct"},"tableIdentifier":null}],"metadata":{"isDbfsCommandResult":false}},"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":1733851823727,"submitTime":1733851823714,"finishTime":1733851824647,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[["ansi",1089]],"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"3efafebf-b343-467b-b63c-3acb13056f4d"},{"version":"CommandV1","origId":973434233671830,"guid":"9de553e5-072f-425e-913b-c7a24a647506","subtype":"command","commandType":"auto","position":97.75,"command":"product_df.withColumn(\"running_avg\", round(col(\"running_sum\")/3, 2)).show()","commandVersion":12,"state":"finished","results":{"type":"listResults","data":[{"type":"ansi","data":"+----------+------------+----------+-------+-----------+----------+-----------+\n|product_id|product_name|sales_date|  sales|running_sum|row_number|running_avg|\n+----------+------------+----------+-------+-----------+----------+-----------+\n|         1|      iphone|01-03-2023|1600000|    4400000|         3| 1466666.67|\n|         1|      iphone|01-04-2023|1700000|    4600000|         4| 1533333.33|\n|         1|      iphone|01-05-2023|1200000|    4500000|         5|  1500000.0|\n|         1|      iphone|01-06-2023|1100000|    4000000|         6| 1333333.33|\n|         2|     samsung|01-03-2023|1080000|    3300000|         3|  1100000.0|\n|         2|     samsung|01-04-2023|1800000|    4000000|         4| 1333333.33|\n|         2|     samsung|01-05-2023| 980000|    3860000|         5| 1286666.67|\n|         2|     samsung|01-06-2023|1100000|    3880000|         6| 1293333.33|\n|         3|     oneplus|01-03-2023|1160000|    3380000|         3| 1126666.67|\n|         3|     oneplus|01-04-2023|1170000|    3450000|         4|  1150000.0|\n|         3|     oneplus|01-05-2023|1175000|    3505000|         5| 1168333.33|\n|         3|     oneplus|01-06-2023|1200000|    3545000|         6| 1181666.67|\n+----------+------------+----------+-------+-----------+----------+-----------+\n\n","name":"stdout","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{"isDbfsCommandResult":false}},"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":1733851875936,"submitTime":1733851875924,"finishTime":1733851876624,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[["ansi",1281]],"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"21b17b67-4129-44fd-89a1-4fb2d6e2e01c"},{"version":"CommandV1","origId":973434233671831,"guid":"0805fec5-3de2-411b-b74f-64762aff4551","subtype":"command","commandType":"auto","position":98.75,"command":"restaurant_df = spark.read.format(\"json\").option(\"multiline\", \"true\").option(\"inferschema\", \"true\").load(\"/FileStore/tables/resturant_json_data.json\")\nrestaurant_df.show()","commandVersion":17,"state":"finished","results":{"type":"listResults","data":[{"type":"ansi","data":"+----+-------+--------------------+-------------+-------------+-------------+------+\n|code|message|         restaurants|results_found|results_shown|results_start|status|\n+----+-------+--------------------+-------------+-------------+-------------+------+\n|null|   null|                  []|            0|            0|            1|  null|\n|null|   null|[{{{17066603}, b9...|         6835|           20|            1|  null|\n|null|   null|                  []|            0|            0|            1|  null|\n|null|   null|                  []|            0|            0|            1|  null|\n|null|   null|[{{{17093124}, b9...|         8680|           20|            1|  null|\n|null|   null|                  []|            0|            0|            1|  null|\n|null|   null|                  []|            0|            0|            1|  null|\n|null|   null|[{{{17580142}, b9...|          943|           20|            1|  null|\n|null|   null|                  []|            0|            0|            1|  null|\n|null|   null|                  []|            0|            0|            1|  null|\n|null|   null|[{{{17284158}, b9...|          257|           20|            1|  null|\n|null|   null|                  []|            0|            0|            1|  null|\n|null|   null|                  []|            0|            0|            1|  null|\n|null|   null|[{{{17678233}, b9...|          358|           20|            1|  null|\n|null|   null|                  []|            0|            0|            1|  null|\n|null|   null|                  []|            0|            0|            1|  null|\n|null|   null|[{{{17375047}, b9...|          641|           20|            1|  null|\n|null|   null|                  []|            0|            0|            1|  null|\n|null|   null|                  []|            0|            0|            1|  null|\n|null|   null|[{{{17616590}, b9...|         1613|           20|            1|  null|\n+----+-------+--------------------+-------------+-------------+-------------+------+\nonly showing top 20 rows\n\n","name":"stdout","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[{"name":"restaurant_df","typeStr":"pyspark.sql.dataframe.DataFrame","schema":{"fields":[{"metadata":{},"name":"code","nullable":true,"type":"long"},{"metadata":{},"name":"message","nullable":true,"type":"string"},{"metadata":{},"name":"restaurants","nullable":true,"type":{"containsNull":true,"elementType":{"fields":[{"metadata":{},"name":"restaurant","nullable":true,"type":{"fields":[{"metadata":{},"name":"R","nullable":true,"type":{"fields":[{"metadata":{},"name":"res_id","nullable":true,"type":"long"}],"type":"struct"}},{"metadata":{},"name":"apikey","nullable":true,"type":"string"},{"metadata":{},"name":"average_cost_for_two","nullable":true,"type":"long"},{"metadata":{},"name":"cuisines","nullable":true,"type":"string"},{"metadata":{},"name":"currency","nullable":true,"type":"string"},{"metadata":{},"name":"deeplink","nullable":true,"type":"string"},{"metadata":{},"name":"establishment_types","nullable":true,"type":{"containsNull":true,"elementType":"string","type":"array"}},{"metadata":{},"name":"events_url","nullable":true,"type":"string"},{"metadata":{},"name":"featured_image","nullable":true,"type":"string"},{"metadata":{},"name":"has_online_delivery","nullable":true,"type":"long"},{"metadata":{},"name":"has_table_booking","nullable":true,"type":"long"},{"metadata":{},"name":"id","nullable":true,"type":"string"},{"metadata":{},"name":"is_delivering_now","nullable":true,"type":"long"},{"metadata":{},"name":"location","nullable":true,"type":{"fields":[{"metadata":{},"name":"address","nullable":true,"type":"string"},{"metadata":{},"name":"city","nullable":true,"type":"string"},{"metadata":{},"name":"city_id","nullable":true,"type":"long"},{"metadata":{},"name":"country_id","nullable":true,"type":"long"},{"metadata":{},"name":"latitude","nullable":true,"type":"string"},{"metadata":{},"name":"locality","nullable":true,"type":"string"},{"metadata":{},"name":"locality_verbose","nullable":true,"type":"string"},{"metadata":{},"name":"longitude","nullable":true,"type":"string"},{"metadata":{},"name":"zipcode","nullable":true,"type":"string"}],"type":"struct"}},{"metadata":{},"name":"menu_url","nullable":true,"type":"string"},{"metadata":{},"name":"name","nullable":true,"type":"string"},{"metadata":{},"name":"offers","nullable":true,"type":{"containsNull":true,"elementType":"string","type":"array"}},{"metadata":{},"name":"photos_url","nullable":true,"type":"string"},{"metadata":{},"name":"price_range","nullable":true,"type":"long"},{"metadata":{},"name":"switch_to_order_menu","nullable":true,"type":"long"},{"metadata":{},"name":"thumb","nullable":true,"type":"string"},{"metadata":{},"name":"url","nullable":true,"type":"string"},{"metadata":{},"name":"user_rating","nullable":true,"type":{"fields":[{"metadata":{},"name":"aggregate_rating","nullable":true,"type":"string"},{"metadata":{},"name":"rating_color","nullable":true,"type":"string"},{"metadata":{},"name":"rating_text","nullable":true,"type":"string"},{"metadata":{},"name":"votes","nullable":true,"type":"string"}],"type":"struct"}}],"type":"struct"}}],"type":"struct"},"type":"array"}},{"metadata":{},"name":"results_found","nullable":true,"type":"long"},{"metadata":{},"name":"results_shown","nullable":true,"type":"long"},{"metadata":{},"name":"results_start","nullable":true,"type":"string"},{"metadata":{},"name":"status","nullable":true,"type":"string"}],"type":"struct"},"tableIdentifier":null}],"metadata":{"isDbfsCommandResult":false}},"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":1733853347994,"submitTime":1733853347981,"finishTime":1733853349089,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[["ansi",2066]],"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"f3d75743-2043-4b86-9385-5076fc5eb6c6"},{"version":"CommandV1","origId":973434233671832,"guid":"692ed61c-242c-4f38-b137-1856684e45e4","subtype":"command","commandType":"auto","position":98.25,"command":"%md\n## 12. Flatten nested JSON in Spark","commandVersion":4,"state":"input","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[],"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"58742d24-7b90-41c5-b4b6-7bd431216095"},{"version":"CommandV1","origId":973434233671833,"guid":"fe5433c7-3f31-4406-ae2c-1cd8e0854d3a","subtype":"command","commandType":"auto","position":99.75,"command":"restaurant_df.printSchema()","commandVersion":1,"state":"finished","results":{"type":"listResults","data":[{"type":"ansi","data":"root\n |-- code: long (nullable = true)\n |-- message: string (nullable = true)\n |-- restaurants: array (nullable = true)\n |    |-- element: struct (containsNull = true)\n |    |    |-- restaurant: struct (nullable = true)\n |    |    |    |-- R: struct (nullable = true)\n |    |    |    |    |-- res_id: long (nullable = true)\n |    |    |    |-- apikey: string (nullable = true)\n |    |    |    |-- average_cost_for_two: long (nullable = true)\n |    |    |    |-- cuisines: string (nullable = true)\n |    |    |    |-- currency: string (nullable = true)\n |    |    |    |-- deeplink: string (nullable = true)\n |    |    |    |-- establishment_types: array (nullable = true)\n |    |    |    |    |-- element: string (containsNull = true)\n |    |    |    |-- events_url: string (nullable = true)\n |    |    |    |-- featured_image: string (nullable = true)\n |    |    |    |-- has_online_delivery: long (nullable = true)\n |    |    |    |-- has_table_booking: long (nullable = true)\n |    |    |    |-- id: string (nullable = true)\n |    |    |    |-- is_delivering_now: long (nullable = true)\n |    |    |    |-- location: struct (nullable = true)\n |    |    |    |    |-- address: string (nullable = true)\n |    |    |    |    |-- city: string (nullable = true)\n |    |    |    |    |-- city_id: long (nullable = true)\n |    |    |    |    |-- country_id: long (nullable = true)\n |    |    |    |    |-- latitude: string (nullable = true)\n |    |    |    |    |-- locality: string (nullable = true)\n |    |    |    |    |-- locality_verbose: string (nullable = true)\n |    |    |    |    |-- longitude: string (nullable = true)\n |    |    |    |    |-- zipcode: string (nullable = true)\n |    |    |    |-- menu_url: string (nullable = true)\n |    |    |    |-- name: string (nullable = true)\n |    |    |    |-- offers: array (nullable = true)\n |    |    |    |    |-- element: string (containsNull = true)\n |    |    |    |-- photos_url: string (nullable = true)\n |    |    |    |-- price_range: long (nullable = true)\n |    |    |    |-- switch_to_order_menu: long (nullable = true)\n |    |    |    |-- thumb: string (nullable = true)\n |    |    |    |-- url: string (nullable = true)\n |    |    |    |-- user_rating: struct (nullable = true)\n |    |    |    |    |-- aggregate_rating: string (nullable = true)\n |    |    |    |    |-- rating_color: string (nullable = true)\n |    |    |    |    |-- rating_text: string (nullable = true)\n |    |    |    |    |-- votes: string (nullable = true)\n |-- results_found: long (nullable = true)\n |-- results_shown: long (nullable = true)\n |-- results_start: string (nullable = true)\n |-- status: string (nullable = true)\n\n","name":"stdout","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{"isDbfsCommandResult":false}},"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":1733853350219,"submitTime":1733853350206,"finishTime":1733853350290,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[["ansi",2666]],"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"c8042e90-8b87-4534-bc67-e4e3968fe164"},{"version":"CommandV1","origId":973434233671834,"guid":"987e125c-2d47-4595-8c82-43ff6597e6be","subtype":"command","commandType":"auto","position":100.75,"command":"restaurant_df.select(\"*\", explode(\"restaurants\").alias(\"flattened_restaurants\"))\\\n            .drop(\"restaurants\")\\\n            .select(\"*\", \"flattened_restaurants.restaurant.R.res_id\",\n                explode_outer(\"flattened_restaurants.restaurant.establishment_types\").alias(\"flattened_establishment_types\"))\\\n            .drop(\"flattened_restaurants.restaurant.establishment_types\")\\\n            .show()","commandVersion":38,"state":"finished","results":{"type":"listResults","data":[{"type":"ansi","data":"+----+-------+-------------+-------------+-------------+------+---------------------+--------+-----------------------------+\n|code|message|results_found|results_shown|results_start|status|flattened_restaurants|  res_id|flattened_establishment_types|\n+----+-------+-------------+-------------+-------------+------+---------------------+--------+-----------------------------+\n|null|   null|         6835|           20|            1|  null| {{{17066603}, b90...|17066603|                         null|\n|null|   null|         6835|           20|            1|  null| {{{17059541}, b90...|17059541|                         null|\n|null|   null|         6835|           20|            1|  null| {{{17064405}, b90...|17064405|                         null|\n|null|   null|         6835|           20|            1|  null| {{{17057797}, b90...|17057797|                         null|\n|null|   null|         6835|           20|            1|  null| {{{17057591}, b90...|17057591|                         null|\n|null|   null|         6835|           20|            1|  null| {{{17064266}, b90...|17064266|                         null|\n|null|   null|         6835|           20|            1|  null| {{{17060516}, b90...|17060516|                         null|\n|null|   null|         6835|           20|            1|  null| {{{17060320}, b90...|17060320|                         null|\n|null|   null|         6835|           20|            1|  null| {{{17059060}, b90...|17059060|                         null|\n|null|   null|         6835|           20|            1|  null| {{{17059012}, b90...|17059012|                         null|\n|null|   null|         6835|           20|            1|  null| {{{17060869}, b90...|17060869|                         null|\n|null|   null|         6835|           20|            1|  null| {{{17061231}, b90...|17061231|                         null|\n|null|   null|         6835|           20|            1|  null| {{{17058534}, b90...|17058534|                         null|\n|null|   null|         6835|           20|            1|  null| {{{17057925}, b90...|17057925|                         null|\n|null|   null|         6835|           20|            1|  null| {{{17064031}, b90...|17064031|                         null|\n|null|   null|         6835|           20|            1|  null| {{{17061237}, b90...|17061237|                         null|\n|null|   null|         6835|           20|            1|  null| {{{17061253}, b90...|17061253|                         null|\n|null|   null|         6835|           20|            1|  null| {{{17061296}, b90...|17061296|                         null|\n|null|   null|         6835|           20|            1|  null| {{{17061205}, b90...|17061205|                         null|\n|null|   null|         6835|           20|            1|  null| {{{17057397}, b90...|17057397|                         null|\n+----+-------+-------------+-------------+-------------+------+---------------------+--------+-----------------------------+\nonly showing top 20 rows\n\n","name":"stdout","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{"isDbfsCommandResult":false}},"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":1733854323216,"submitTime":1733854323206,"finishTime":1733854324013,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[["ansi",3026]],"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"82720f21-2f31-4927-af6f-a8a6afdae72c"},{"version":"CommandV1","origId":973434233671835,"guid":"ba075a36-c91d-4201-bfdc-8924d49782b5","subtype":"command","commandType":"auto","position":100.25,"command":"%md\n- We have to thus, flatten **array** and **struct** type. For array type, we **`explode()`** and for struct type, we will use **`.(dot)`** to access children.\n\n\nWhen we explode, if the value stored is `null`, then the records are dropped. In such a case, we use **`explode_outer`**","commandVersion":24,"state":"input","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[],"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"8fe7181f-1ed5-4f12-8e2e-e43c85dddb6d"},{"version":"CommandV1","origId":2080498328062786,"guid":"5b3f5ff6-0d72-431a-a39d-ce0e1138179a","subtype":"command","commandType":"auto","position":39.75,"command":"# Creating a row\nfrom pyspark.sql import Row\n\nrow = Row(\"6\", \"Tia\", \"21\", \"100000\", \"Allahabad\", \"nominee3\")","commandVersion":27,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838783971,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"4e216503-fc06-44bb-8597-2c4d52db4857"},{"version":"CommandV1","origId":2080498328062787,"guid":"36787073-5676-4118-9e25-595389cc5caf","subtype":"command","commandType":"auto","position":39.25,"command":"%md\n**Note:** The dataframe so formed is being stored in the memory in the object type `Row()`. `Row()` type object means that each of the entire row is being converted into Byte type and being stored in the memory.","commandVersion":7,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"c41d82ef-ffd6-4537-a8d7-54198a91b0a5"},{"version":"CommandV1","origId":2080498328062788,"guid":"f1e20ea6-8357-408e-8e45-2ca3d9a7c1b2","subtype":"command","commandType":"auto","position":40.75,"command":"# Simply viewing a columns\nemployee_df.select('id').show()","commandVersion":4,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838784002,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"1fccc202-8bc5-4a5e-9236-43073f37f142"},{"version":"CommandV1","origId":2080498328062791,"guid":"f26e800d-de55-4fe0-8fce-b3597e53d64e","subtype":"command","commandType":"auto","position":41.75,"command":"# Change values of a column\nfrom pyspark.sql.functions import *\nfrom pyspark.sql.types import *\n\nemployee_df.select(col(\"id\")+5).show()","commandVersion":12,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838784021,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"b84b4810-9fa8-43be-8bb5-a97eb3a51312"},{"version":"CommandV1","origId":2080498328062792,"guid":"0dfa0829-5dcd-4fb6-a1d3-42d891e0ab8e","subtype":"command","commandType":"auto","position":42.75,"command":"# Select multiple columns\nemployee_df.select(\"id\", \"name\", \"age\").show()\n\nemployee_df.select(\"*\").show()\n\n#--------COMBINING ALL METHODS-------\nemployee_df.select(col(\"id\"), col(\"name\"), employee_df[\"age\"], employee_df.address).show()","commandVersion":26,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838784039,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"f83a6237-e068-4e9b-884b-7d6b0c2a3ebd"},{"version":"CommandV1","origId":2080498328062793,"guid":"45f90b2e-0c8d-4401-a1aa-296192e043ab","subtype":"command","commandType":"auto","position":43.75,"command":"employee_df.select(expr(\"id + 5\")).show()\n\n# SQL statements\nemployee_df.select(expr(\"id as employee_id\"), expr(\"name as employee_name\"), expr(\"concat(age, address)\")).show()","commandVersion":27,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838784072,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"498247ee-747c-4d80-94af-f9120ea281c0"},{"version":"CommandV1","origId":2080498328062794,"guid":"ccf5cd24-9f9c-4ff4-b452-cf5dec6b07fb","subtype":"command","commandType":"auto","position":43.25,"command":"%md\n### Expressions\n\nAll the **sql** statements can be written inside of **expressions**.","commandVersion":6,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"5f3fbff2-1896-430e-91c7-629ab85b46d9"},{"version":"CommandV1","origId":2080498328062795,"guid":"c93e61ab-92a5-48f3-9b72-fb6595de1050","subtype":"command","commandType":"auto","position":44.75,"command":"# Create a virtual view of the DataFrame\nemployee_df.createOrReplaceTempView(\"employee_table\")","commandVersion":9,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838784099,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"63f08fcd-6552-4eff-b306-0198ae92af22"},{"version":"CommandV1","origId":2080498328062796,"guid":"b4d84e9a-90cf-4972-ac05-800815bfee8d","subtype":"command","commandType":"auto","position":44.25,"command":"%md\n### SparkSQL\n\nSparkSQL is basically SQL only. We need to convert the **`Dataframe`** into a **`TempView`**","commandVersion":13,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"f690c843-69ce-4e6d-ab7d-9fe9612f6578"},{"version":"CommandV1","origId":2080498328062797,"guid":"f9890494-2b23-45cb-a2dd-bb6a3ac6128a","subtype":"command","commandType":"auto","position":40.625,"command":"%md\n### Multiple ways of selecting columns\n\n\n**Notes:**\n* Columns are expressions.\n* Columns are, thus, set of transformations on one or more than one values in a record.","commandVersion":2,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"895a567f-c42d-4fe3-a2f6-7a00dabfcb0e"},{"version":"CommandV1","origId":2080498328062798,"guid":"9c355668-c911-45cd-a6c8-a75005e6ff4d","subtype":"command","commandType":"auto","position":45.75,"command":"spark.sql(\n    \"\"\"\n    SELECT * FROM employee_table\n    \"\"\"\n).show(truncate=False)","commandVersion":13,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838784119,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"a0eb893d-5512-4c86-92b8-09ed1744eaa2"},{"version":"CommandV1","origId":2080498328062799,"guid":"6b323cb5-bc13-47c4-a67f-1445dbdfa21e","subtype":"command","commandType":"auto","position":46.75,"command":"# Alias\nemployee_df.select(col(\"id\").alias(\"emp_id\"), \"name\").show()","commandVersion":9,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838784152,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"863f7279-f5c7-4d10-81b0-4d53453c416a"},{"version":"CommandV1","origId":2080498328062800,"guid":"95c72c09-d35c-495b-89f8-309c6d6a8ee0","subtype":"command","commandType":"auto","position":46.25,"command":"%md\n### Operations\n1. Aliasing - `alias()`\n2. Filter/Where - `.filter()` `.where()`\n3. Literal - `lit()`\n4. Adding Columns - using `withColumn()`. If column is there, data is overwritten, if not there, then a new column is cerated\n5. Renaming Columns - `withColumnRenamed()`\n6. Casting Data Types - `withColumn()` and `.cast()`\n7. Removing Columns - `.drop()`\n8. Union & UnionAll\n9. If-Else - `.when()` - `.otherwise()` in spark, `case when` - `then`\n10. Find Unique - `.distinct()`\n11. Drop Duplicates - `.drop_duplicates()`\n\n\n**Note:** \n* `.distinct()` - Removes duplicate rows based on all columns in the DataFrame.\n* `.dropDuplicates()` - Removes duplicate rows based on selected subset of columns (can also work on all columns).\n12. Sort data - `.sort(col(\"salary\").asc())` | .asc or .desc","commandVersion":77,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"82d79746-e036-4c11-8100-0eaef4b32ba7"},{"version":"CommandV1","origId":2080498328062801,"guid":"362cc439-524c-4d7b-8553-196b27782387","subtype":"command","commandType":"auto","position":47.75,"command":"# Filter\n# Find Salary above 1.5Lakhs\nemployee_df.filter((col(\"salary\")>150000) & (col(\"age\")<18)).show()","commandVersion":17,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838784167,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"d10e8b75-3ff3-43af-8b2b-86d3afa4713c"},{"version":"CommandV1","origId":2080498328062804,"guid":"0fc338fa-0bbb-4a07-8e9e-0d854d487560","subtype":"command","commandType":"auto","position":48.75,"command":"# Add a column of `last_name` with default value of `null`\nemployee_df.select(\"*\", lit(\"null\").alias(\"last_name\")).show()","commandVersion":13,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838784184,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"4f6e778a-44f9-4647-bf8a-eb4936b7cd05"},{"version":"CommandV1","origId":2080498328062805,"guid":"14a129f7-0f55-436b-87a6-3b5abad27155","subtype":"command","commandType":"auto","position":49.75,"command":"# Add a column\nemployee_df.withColumn(\"Last_Name\", lit(\"null\")).show()","commandVersion":7,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838784200,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"25ae1c64-6807-46f8-a7fc-24d0d767a44a"},{"version":"CommandV1","origId":2080498328062806,"guid":"bc41ec98-b998-471f-a0ff-ff841cdda3a5","subtype":"command","commandType":"auto","position":50.75,"command":"# Rename column - rename id --> emp_id\nemployee_df.withColumnRenamed(\"id\", \"emp_id\").show()","commandVersion":10,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838784215,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"bf307e89-9447-4a7a-bff2-5ce0d9bced95"},{"version":"CommandV1","origId":2080498328062807,"guid":"79974002-31bc-47ed-8d2e-d1bf7e190fe8","subtype":"command","commandType":"auto","position":51.75,"command":"# Casting - chnage data type of a column from one to another\nemployee_df.withColumn(\"id\", col(\"id\").cast(\"string\")).withColumn(\"salary\", col(\"salary\").cast(\"long\")).printSchema()","commandVersion":18,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838784229,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"93bc65a5-ceed-4dd7-89b9-f3f631afdbce"},{"version":"CommandV1","origId":2080498328062808,"guid":"002432c4-6b04-4061-ab68-5ea1581ee2c5","subtype":"command","commandType":"auto","position":52.75,"command":"# Remove columns\nemployee_df.drop(\"age\", col(\"address\")).show","commandVersion":4,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838784245,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"4ccc39e0-b981-45eb-a81b-b2bb1e747cd1"},{"version":"CommandV1","origId":2080498328062809,"guid":"d3422b81-f6bf-4d93-bb29-15975aa35237","subtype":"command","commandType":"auto","position":53.75,"command":"spark.sql(\"\"\"\n          select *, \"Saxena\" as last_name, concat(name, last_name) as full_name, cast(id as string) from employee_table where age < 18 and salary > 150000\n          \"\"\").show()\n\nspark.sql(\"\"\"\n          select *, \"Saxena\" as last_name, concat(name, last_name) as full_name, cast(id as string) from employee_table where age < 18 and salary > 150000\n          \"\"\").printSchema()          ","commandVersion":27,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838784274,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"b5466680-f819-438c-a060-6b46c3a4bc04"},{"version":"CommandV1","origId":2080498328062810,"guid":"d9ee6694-641c-434c-ab04-2ed8ebeb410a","subtype":"command","commandType":"auto","position":53.25,"command":"%md\nAll the above operations can be done using SQL as well.","commandVersion":2,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"b6bb76ec-ed2c-4002-aeab-56dc33879c17"},{"version":"CommandV1","origId":2080498328062811,"guid":"c1c62931-90f6-4edc-8f06-f55891a315cd","subtype":"command","commandType":"auto","position":54.75,"command":"data=[(10 ,'Anil',50000, 18),\n(11 ,'Vikas',75000,  16),\n(12 ,'Nisha',40000,  18),\n(13 ,'Nidhi',60000,  17),\n(14 ,'Priya',80000,  18),\n(15 ,'Mohit',45000,  18),\n(16 ,'Rajesh',90000, 10),\n(17 ,'Raman',55000, 16),\n(18 ,'Sam',65000,   17)]\n\nschema = [\"id\", \"name\", \"salary\", \"mngr_id\"]\n\nmanager_df = spark.createDataFrame(data, schema)\n\nmanager_df.show()","commandVersion":15,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838784289,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"f572c130-893c-4662-b757-c0978f5300b0"},{"version":"CommandV1","origId":2080498328062812,"guid":"7ec1fc40-6fb4-4a03-ac94-0709679eee7d","subtype":"command","commandType":"auto","position":55.75,"command":"manager_df.count()","commandVersion":2,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838784305,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"aa0f2461-cd1e-43ea-acc5-3a339b4a3da6"},{"version":"CommandV1","origId":2080498328062813,"guid":"968839f0-6568-4c44-8d3a-4d767ede41ff","subtype":"command","commandType":"auto","position":56.75,"command":"data1=[(19 ,'Sohan',50000, 18),\n(20 ,'Sima',75000,  17),\n(17 ,'Raman',55000, 16),\n(18 ,'Sam',65000,   17)]\n\nmanager_df1 = spark.createDataFrame(data1, schema)\n\nmanager_df1.show()","commandVersion":11,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838784322,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"06fe619c-4bfe-4467-9a01-68987eab5f1d"},{"version":"CommandV1","origId":2080498328062814,"guid":"4ce6d513-18f5-4f9c-b0d2-5cecdf20065f","subtype":"command","commandType":"auto","position":57.75,"command":"manager_df.union(manager_df1).show() # adds the UNIQUE records of table 2 at the bottom of table 1\nmanager_df.unionAll(manager_df1).show() # add ALL the records of table 2 at the bottom of table 1","commandVersion":17,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838784338,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"72156f51-416d-41f5-a1f9-0078a374d3d4"},{"version":"CommandV1","origId":2080498328062815,"guid":"c3a426dc-41ee-4592-83bd-fb669dd30090","subtype":"command","commandType":"auto","position":58.75,"command":"manager_df.union(manager_df).distinct().show()","commandVersion":9,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838784354,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"87a39994-c529-4fe1-b137-374d2fb78bf2"},{"version":"CommandV1","origId":2080498328062816,"guid":"dfd6d5bf-adb4-4834-bd98-24df1ec9694e","subtype":"command","commandType":"auto","position":59.75,"command":"wrong_column_data=[(19 ,50000, 18,'Sohan'),\n(20 ,75000,  17,'Sima')]\n\nnew_schema = [\"id\", \"salary\", \"mngr_id\", \"name\"]\n\nwrong_df = spark.createDataFrame(wrong_column_data, new_schema)\n\nmanager_df.union(wrong_df).show()","commandVersion":25,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838784386,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"c944dd62-849c-438b-9bf7-68fd27c20598"},{"version":"CommandV1","origId":2080498328062817,"guid":"cd58db14-2e7a-406c-bcf8-dbe7c1672f19","subtype":"command","commandType":"auto","position":59.25,"command":"%md\n**Note:** Thus is PySpark **`union()`** and **`unionAll()`** behave the same. To consider distinct rows, use **`.distinct()`**. ","commandVersion":27,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"cbb835ec-a37f-4478-a159-0e24b6d53258"},{"version":"CommandV1","origId":2080498328062818,"guid":"6501aee7-cc44-4986-a0c9-b7da5c72747b","subtype":"command","commandType":"auto","position":60.75,"command":"manager_df.union(wrong_df).show()\nmanager_df.unionAll(wrong_df).show()","commandVersion":5,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838784403,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"6727b154-47e0-4deb-8e51-04876adb78de"},{"version":"CommandV1","origId":2080498328062819,"guid":"39952ea9-9db5-480c-9000-06725c72edd8","subtype":"command","commandType":"auto","position":61.75,"command":"manager_df.unionByName(wrong_df).show()","commandVersion":4,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838784437,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"980d2eb1-8594-4e36-8a7c-2d3e0c0a7451"},{"version":"CommandV1","origId":2080498328062820,"guid":"c86ed062-5653-4096-aff7-5fc36648e372","subtype":"command","commandType":"auto","position":61.25,"command":"%md\n**Thus, while combining with wrong data, `union()` and `unionAll()` does'nt give any error. However, if we want to match the columns, then we must use `unionByName()`**","commandVersion":21,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"b66e9ab8-b5a9-46fe-94f7-0cd2e544e9e5"},{"version":"CommandV1","origId":2080498328062821,"guid":"52f8dddf-fd3c-4145-b749-8ec0d7e566ff","subtype":"command","commandType":"auto","position":62.75,"command":"# If-else\nemp_data = [\n(1,'manish',26,20000,'india','IT'),\n(2,'rahul',None,40000,'germany','engineering'),\n(3,'pawan',12,60000,'india','sales'),\n(4,'roshini',44,None,'uk','engineering'),\n(5,'raushan',35,70000,'india','sales'),\n(6,None,29,200000,'uk','IT'),\n(7,'adam',37,65000,'us','IT'),\n(8,'chris',16,40000,'us','sales'),\n(None,None,None,None,None,None),\n(7,'adam',37,65000,'us','IT')\n]\nschema = [\"id\", \"name\", \"age\", \"salary\", \"location\", \"field\"]\n\nemployee_df = spark.createDataFrame(emp_data, schema=schema)\nemployee_df.withColumn(\"adult\", when(col(\"age\") > 18, \"Yes\").when(col(\"age\") < 18, \"No\").otherwise(\"Novalue\")).show()","commandVersion":36,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838784454,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"cb5c6f23-a48d-4431-9dc8-6ed1ec8ea786"},{"version":"CommandV1","origId":2080498328062822,"guid":"e8f6065b-4839-4dd8-81ee-7df25ee08730","subtype":"command","commandType":"auto","position":63.75,"command":"table = employee_df.createTempView(\"temp_table\")\n\nspark.sql(\"\"\"\n          select *,\n          case when age < 18 then \"minor\" \n          when age > 18 then \"major\"\n          else \"no-value\"\n          end as adult\n          from temp_table\n          \"\"\").show()\n","commandVersion":27,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838784472,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"5c542759-99a0-4628-8df5-6cdea58a2919"},{"version":"CommandV1","origId":2080498328062823,"guid":"319e37c9-95b4-413a-b29b-409e2df9910b","subtype":"command","commandType":"auto","position":64.75,"command":"# Unique\nemp_df.distinct().count()","commandVersion":5,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838784522,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"bba2d8df-1128-4d06-b8ba-f4b50470f196"},{"version":"CommandV1","origId":2080498328062824,"guid":"46d961a1-acd2-4148-927b-e40a2a1a7176","subtype":"command","commandType":"auto","position":64.25,"command":"data=[(10 ,'Anil',50000, 18),\n(11 ,'Vikas',75000,  16),\n(12 ,'Nisha',40000,  18),\n(13 ,'Nidhi',60000,  17),\n(14 ,'Priya',80000,  18),\n(15 ,'Mohit',45000,  18),\n(16 ,'Rajesh',90000, 10),\n(17 ,'Raman',55000, 16),\n(18 ,'Sam',65000,   17),\n(15 ,'Mohit',45000,  18),\n(13 ,'Nidhi',60000,  17),      \n(14 ,'Priya',90000,  18),  \n(18 ,'Sam',65000,   17)\n     ]\n\nemp_df = spark.createDataFrame(data, [\"id\", \"name\", \"salary\", \"mngr_id\"])\nemp_df.show()","commandVersion":8,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838784489,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"80434611-5c17-4762-8038-7ad2d55cf27f"},{"version":"CommandV1","origId":2080498328062825,"guid":"5a9007a7-2ebe-4a98-b3b0-303d0a298a1a","subtype":"command","commandType":"auto","position":65.75,"command":"# find distinct records on the bases of specific column\nemp_df.select(\"name\", \"id\").distinct().show()","commandVersion":8,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838784537,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"ecdaf6dc-0877-4ea0-9e53-a34aae82432b"},{"version":"CommandV1","origId":2080498328062826,"guid":"5682bd49-3146-4596-a514-fa2c93db6fa9","subtype":"command","commandType":"auto","position":66.75,"command":"# Drop duplicates\ndrop_dup_emp_df = emp_df.drop_duplicates([\"id\", \"name\", \"salary\", \"mngr_id\"])\ndrop_dup_emp_df.count()","commandVersion":13,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838784553,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"6ddf66fe-9eb7-45fe-9d16-c0bb6c43e61b"},{"version":"CommandV1","origId":2080498328062827,"guid":"87f431da-923d-4db0-890c-ae858ae6602c","subtype":"command","commandType":"auto","position":64.5,"command":"emp_df.count()","commandVersion":2,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838784506,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"fcd478dd-02ac-4fe6-a8c3-c97ee1ad4bc9"},{"version":"CommandV1","origId":2080498328062828,"guid":"1f5b677f-4f21-4427-928a-09f5fd2aaf56","subtype":"command","commandType":"auto","position":67.75,"command":"manager_df.sort(col(\"salary\").asc(), col(\"name\").desc()).show() # order matters","commandVersion":16,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838784569,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"61f41427-ad3d-456f-b511-e7f1379d0384"},{"version":"CommandV1","origId":2080498328062829,"guid":"202abd74-cefe-4df0-8181-870a59184f39","subtype":"command","commandType":"auto","position":68.75,"command":"emp_data = [\n(1,'manish',26,20000,'india','IT'),\n(2,'rahul',None,40000,'germany','engineering'),\n(3,'pawan',12,60000,'india','sales'),\n(4,'roshini',44,None,'uk','engineering'),\n(5,'raushan',35,70000,'india','sales'),\n(6,None,29,200000,'uk','IT'),\n(7,'adam',37,65000,'us','IT'),\n(8,'chris',16,40000,'us','sales'),\n(None,None,None,None,None,None),\n(7,'adam',37,65000,'us','IT')\n]\n\nemp_df = spark.createDataFrame(emp_data, [\"id\", \"name\", \"age\", \"salary\", \"location\", \"field\"])","commandVersion":13,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838784602,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"5de088a9-767e-44e2-bbdb-5bd4d1588022"},{"version":"CommandV1","origId":2080498328062830,"guid":"894cdb84-bf47-4976-a665-7a36a353224d","subtype":"command","commandType":"auto","position":68.25,"command":"%md\n### Aggregation Functions\n\nAll agggregation functions must be written inside of **`.select()`**\n1. Count - `.count()` skips all the `null` values\n2. Min\n3. Max\n4. Avg\n5. Sum\n\n**Note:** `**.count**` is **action** and **transformation** both, depending on how it is used.\n1. .count(\"col) - action\n2. .select(count(\"col)) - transformation --> this will not create any **job** til the time action like **.show()** is not hit.","commandVersion":47,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"6be4bd90-fab2-437f-a676-480344886dae"},{"version":"CommandV1","origId":2080498328062831,"guid":"fac2756c-6e1c-4432-9249-ca4de542623b","subtype":"command","commandType":"auto","position":69.75,"command":"emp_df.count()","commandVersion":1,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838784621,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"1ef6f311-f3ba-45a7-99d7-c8fa0060c65d"},{"version":"CommandV1","origId":2080498328062832,"guid":"514f6170-9f58-427d-98d9-347c7a0f6036","subtype":"command","commandType":"auto","position":70.75,"command":"emp_df.select(count(\"name\")).show() # skips the null values","commandVersion":7,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838784637,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"d5812a95-9fda-4612-9730-1daef858e2d9"},{"version":"CommandV1","origId":2080498328062833,"guid":"1dec849e-3db6-430f-a80e-fc19818edcb7","subtype":"command","commandType":"auto","position":71.75,"command":"# Max, Min, Sum, Avg\nemp_df.select(sum(\"salary\").alias(\"Total Salary\"), max(\"salary\").alias(\"Max Salary\"), min(\"salary\"), avg(\"salary\").cast(\"int\")).show()","commandVersion":18,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838784652,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"29b674c3-0066-447d-8ba6-4bfc691f2bdb"},{"version":"CommandV1","origId":2080498328062834,"guid":"4e2e0107-8e01-4a36-b492-c155acfa6d24","subtype":"command","commandType":"auto","position":72.75,"command":"emp_data = [(1,'manish',50000,'IT'),\n(2,'vikash',60000,'sales'),\n(3,'raushan',70000,'marketing'),\n(4,'mukesh',80000,'IT'),\n(5,'pritam',90000,'sales'),\n(6,'nikita',45000,'marketing'),\n(7,'ragini',55000,'marketing'),\n(8,'rakesh',100000,'IT'),\n(9,'aditya',65000,'IT'),\n(10,'rahul',50000,'marketing')]\n\nemp_df = spark.createDataFrame(emp_data, ['id', 'name', 'salary', 'department'])\nemp_df.show()","commandVersion":25,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838784690,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"6d025749-86ea-4335-a044-0af3f40bfd54"},{"version":"CommandV1","origId":2080498328062835,"guid":"2177b47d-902b-48d9-a4c0-654c1c84fdeb","subtype":"command","commandType":"auto","position":72.25,"command":"%md\n### GroupBy\n\nGroups records based on specific column with similar values.\n\nQues \n1. Total salary given to its employee\n2. Total salary per department wise\n3. Total salary per dpt and per country wise\n4. all column name with one extra column where total salary of each dpt is mentioned\n5. %age of salary given to each employee per dpt","commandVersion":25,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"da77a2e0-c075-470a-8f7d-290cc47e9811"},{"version":"CommandV1","origId":2080498328062836,"guid":"06ea9f4a-ffb0-4d88-9585-1e967c118882","subtype":"command","commandType":"auto","position":73.75,"command":"# 1. Total salary given to its employee\nemp_df.select(sum('salary')).show()","commandVersion":3,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838784807,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"f8b3b95f-e7d5-489a-b552-9747fb41768d"},{"version":"CommandV1","origId":2080498328062837,"guid":"25ea766c-4158-463c-b0fa-350ff4b4f9a9","subtype":"command","commandType":"auto","position":74.75,"command":"# 2. Total salary given per department\nemp_df.groupBy('department')\\\n      .agg(sum(\"salary\")).show()","commandVersion":14,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838784824,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"5876dc2a-eff6-4aad-828e-09e7bc5e204b"},{"version":"CommandV1","origId":2080498328062838,"guid":"d394ab16-ca11-4af1-8e2a-aa09d32b872f","subtype":"command","commandType":"auto","position":75.75,"command":"# 3. Total salary per dpt and per country wise\n\nemp_data_with_country = [\n(1,'manish',50000,'IT','india'),\n(2,'vikash',60000,'sales','us'),\n(3,'raushan',70000,'marketing','india'),\n(4,'mukesh',80000,'IT','us'),\n(5,'pritam',90000,'sales','india'),\n(6,'nikita',45000,'marketing','us'),\n(7,'ragini',55000,'marketing','india'),\n(8,'rakesh',100000,'IT','us'),\n(9,'aditya',65000,'IT','india'),\n(10,'rahul',50000,'marketing','us'),\n]\n\nemp_df_with_country = spark.createDataFrame(emp_data_with_country, [\"id\", \"name\", \"salary\", \"department\", \"country\"])\nemp_df_with_country.groupBy(\"department\", \"country\")\\\n                   .agg(sum(\"salary\")).show()\n","commandVersion":31,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838784859,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"603f01cf-ce0d-4068-8f8d-bbe59a49f27c"},{"version":"CommandV1","origId":2080498328062839,"guid":"81fabd43-9aa2-42d7-b77e-82dcd1dd2abe","subtype":"command","commandType":"auto","position":75.25,"command":"%md\nNow, to the above result, if we want the table to include the name, dept, salary, sum(salary)....we will have to use:\n1. **join** - store the result of this data in a table and then join on `department`\n2. **window** function","commandVersion":18,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"754d39af-5207-43a8-b536-84d9189370a0"},{"version":"CommandV1","origId":2080498328062840,"guid":"2c3e7277-edb4-4221-9819-b99a5967ca14","subtype":"command","commandType":"auto","position":76.75,"command":"\ncustomer_data = [(1,'manish','patna',\"30-05-2022\"),\n(2,'vikash','kolkata',\"12-03-2023\"),\n(3,'nikita','delhi',\"25-06-2023\"),\n(4,'rahul','ranchi',\"24-03-2023\"),\n(5,'mahesh','jaipur',\"22-03-2023\"),\n(6,'prantosh','kolkata',\"18-10-2022\"),\n(7,'raman','patna',\"30-12-2022\"),\n(8,'prakash','ranchi',\"24-02-2023\"),\n(9,'ragini','kolkata',\"03-03-2023\"),\n(10,'raushan','jaipur',\"05-02-2023\")]\n\ncustomer_schema=['customer_id','customer_name','address','date_of_joining']\n\n\nsales_data = [(1,22,10,\"01-06-2022\"),\n(1,27,5,\"03-02-2023\"),\n(2,5,3,\"01-06-2023\"),\n(5,22,1,\"22-03-2023\"),\n(7,22,4,\"03-02-2023\"),\n(9,5,6,\"03-03-2023\"),\n(2,1,12,\"15-06-2023\"),\n(1,56,2,\"25-06-2023\"),\n(5,12,5,\"15-04-2023\"),\n(11,12,76,\"12-03-2023\")]\n\nsales_schema=['customer_id','product_id','quantity','date_of_purchase']\n\n\nproduct_data = [(1, 'fanta',20),\n(2, 'dew',22),\n(5, 'sprite',40),\n(7, 'redbull',100),\n(12,'mazza',45),\n(22,'coke',27),\n(25,'limca',21),\n(27,'pepsi',14),\n(56,'sting',10)]\n\nproduct_schema=['id','name','price']\n\ncustomer_df = spark.createDataFrame(customer_data, customer_schema)\nsales_df = spark.createDataFrame(sales_data, sales_schema)\nproduct_df = spark.createDataFrame(product_data, product_schema)","commandVersion":12,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838784893,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"637e66de-d272-4be0-a676-ed5c56b076df"},{"version":"CommandV1","origId":2080498328062841,"guid":"b628977d-1bfc-4976-9ccd-715d38a4546c","subtype":"command","commandType":"auto","position":76.25,"command":"%md\n### Join in Spark\n\n* Condition to implement a join - **Atleast one column** should match in the corresponding tables. \n* It is an **expensive** operation since it causes **data shuffling.**\n* **Syntax** - `df1.join(df2, condition, join_type)`.\n* **Multiple Joins** - `.join( (join1), (join2), ....)` \n\nTypes of joins:\n1. Inner join - Records found in both\n2. Left join - Left Table + Common b/w left & right(will set NULL in the required fields of right table)\n3. Right join - Right table + Common b/w left & right(will set NULL in the required fields of left table)\n4. Outer join - Left + right table\n5. Left Semi - Same as Inner join only\n6. Left Anti - Only Left - Common Part \n7. Cross Join - Very expensive operation. Returns the dot product of both the table. len(A cross_join B) == len(A) * len(B) ","commandVersion":76,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"71509c03-d584-42c6-925e-7311870f8f46"},{"version":"CommandV1","origId":2080498328062842,"guid":"1ee2a5a4-b691-4334-aec6-10f2131bb83f","subtype":"command","commandType":"auto","position":77.75,"command":"# Give the customers id of customers who came to our platform but did buy product/products\ncustomer_df.join(sales_df, customer_df[\"customer_id\"] == sales_df[\"customer_id\"], \"inner\").select(customer_df[\"customer_id\"]).distinct().show()\n","commandVersion":31,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838784907,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"c71f2fba-80b0-4deb-b9d0-35cd20471fee"},{"version":"CommandV1","origId":2080498328062843,"guid":"cc281a9d-ce7d-4253-a5d2-0081037f4548","subtype":"command","commandType":"auto","position":78.75,"command":"# Give the name and customer id of all the customer who came to the site but did not shop anything.\ncustomer_df.join(sales_df, customer_df[\"customer_id\"] == sales_df[\"customer_id\"], \"left\")\\\n          .filter(sales_df[\"customer_id\"].isNull())\\\n          .select(customer_df[\"customer_id\"], customer_df[\"customer_name\"]).show()","commandVersion":32,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838784922,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"3c411e37-7903-4afa-96a6-607b6b514db8"},{"version":"CommandV1","origId":2080498328062845,"guid":"fe3fd22d-90d7-4fa7-bc36-729515a03f15","subtype":"command","commandType":"auto","position":79.75,"command":"emp_data = [(1,'manish',50000,'IT','m'),\n(2,'vikash',60000,'sales','m'),\n(3,'raushan',70000,'marketing','m'),\n(4,'mukesh',80000,'IT','m'),\n(5,'priti',90000,'sales','f'),\n(6,'nikita',45000,'marketing','f'),\n(7,'ragini',55000,'marketing','f'),\n(8,'rashi',100000,'IT','f'),\n(9,'aditya',65000,'IT','m'),\n(10,'rahul',50000,'marketing','m'),\n(11,'rakhi',50000,'IT','f'),\n(12,'akhilesh',90000,'sales','m')]\n\nemp_df = spark.createDataFrame(emp_data, [\"id\", \"name\", \"salary\", \"department\", \"gender\"])\nemp_df.show()","commandVersion":25,"state":"finished","results":{"type":"listResults","data":[{"type":"ansi","data":"+---+--------+------+----------+------+\n| id|    name|salary|department|gender|\n+---+--------+------+----------+------+\n|  1|  manish| 50000|        IT|     m|\n|  2|  vikash| 60000|     sales|     m|\n|  3| raushan| 70000| marketing|     m|\n|  4|  mukesh| 80000|        IT|     m|\n|  5|   priti| 90000|     sales|     f|\n|  6|  nikita| 45000| marketing|     f|\n|  7|  ragini| 55000| marketing|     f|\n|  8|   rashi|100000|        IT|     f|\n|  9|  aditya| 65000|        IT|     m|\n| 10|   rahul| 50000| marketing|     m|\n| 11|   rakhi| 50000|        IT|     f|\n| 12|akhilesh| 90000|     sales|     m|\n+---+--------+------+----------+------+\n\n","name":"stdout","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[{"name":"emp_df","typeStr":"pyspark.sql.dataframe.DataFrame","schema":{"fields":[{"metadata":{},"name":"id","nullable":true,"type":"long"},{"metadata":{},"name":"name","nullable":true,"type":"string"},{"metadata":{},"name":"salary","nullable":true,"type":"long"},{"metadata":{},"name":"department","nullable":true,"type":"string"},{"metadata":{},"name":"gender","nullable":true,"type":"string"}],"type":"struct"},"tableIdentifier":null}],"metadata":{"isDbfsCommandResult":false}},"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":1733839209143,"submitTime":1733839209120,"finishTime":1733839210344,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[["ansi",641]],"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"52f5e7f0-13e8-43e1-ad1e-181c6f62d529"},{"version":"CommandV1","origId":2636093781425836,"guid":"a9dfd4fb-6a29-4f3e-bad8-7216efc93d72","subtype":"command","commandType":"auto","position":1.0,"command":"spark","commandVersion":2,"state":"finished","results":{"type":"listResults","data":[{"type":"htmlSandbox","data":"\n            <div>\n                <p><b>SparkSession - hive</b></p>\n                \n        <div>\n            <p><b>SparkContext</b></p>\n\n            <p><a href=\"/?o=18716907705525#setting/sparkui/1210-132857-v8qlllv8/driver-5277203379433852241\">Spark UI</a></p>\n\n            <dl>\n              <dt>Version</dt>\n                <dd><code>v3.3.2</code></dd>\n              <dt>Master</dt>\n                <dd><code>local[8]</code></dd>\n              <dt>AppName</dt>\n                <dd><code>Databricks Shell</code></dd>\n            </dl>\n        </div>\n        \n            </div>\n        ","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"textData":null,"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{"isDbfsCommandResult":false}},"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":1733855030789,"submitTime":1733855030391,"finishTime":1733855031500,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[["htmlSandbox",591]],"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"fa673156-6649-45b0-b805-b33db45e0d6a"},{"version":"CommandV1","origId":2636093781425838,"guid":"fad341de-d7e7-4eb9-a34d-dfb970ec2008","subtype":"command","commandType":"auto","position":0.5,"command":"%md\n### DataFrame reader API\nThe API used for reading the files in spark is `.read()`. The files can be CSV, JSON, Parquet, ODBC/JDBC. Parquet is the format by default.\n\n**Syntax**\n`spark.read.format(\"__file format__\").option(\"key\": \"value\").load(\"__path location__\").schema()`\n\n3 modes `mode()`\n* Failfast - If there is any corrupted record in our data, fail execution.\n* Dropmalformed - Drop the corrupted record.\n* Permissive - By default. Set null value to all corrupted fields.","commandVersion":55,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"295f8fe9-0836-485d-8d9d-6caaab0c79c2"},{"version":"CommandV1","origId":2636093781425843,"guid":"990e3113-547c-49b7-b251-2b0669e5bdb0","subtype":"command","commandType":"auto","position":2.0,"command":"flight_df = (\n    spark.read.format(\"csv\")\n    .option(\"header\", \"false\")\n    .option(\"inferschema\", \"false\")\n    .option(\"mode\", \"FAILFAST\")\n    .load(\"/FileStore/tables/flight_data_pyspark.csv\")\n)\n\nflight_df.show(5)","commandVersion":23,"state":"finished","results":{"type":"listResults","data":[{"type":"ansi","data":"+-----------------+-------------------+-----+\n|              _c0|                _c1|  _c2|\n+-----------------+-------------------+-----+\n|DEST_COUNTRY_NAME|ORIGIN_COUNTRY_NAME|count|\n|    United States|            Romania|    1|\n|    United States|            Ireland|  264|\n|    United States|              India|   69|\n|            Egypt|      United States|   24|\n+-----------------+-------------------+-----+\nonly showing top 5 rows\n\n","name":"stdout","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[{"name":"flight_df","typeStr":"pyspark.sql.dataframe.DataFrame","schema":{"fields":[{"metadata":{},"name":"_c0","nullable":true,"type":"string"},{"metadata":{},"name":"_c1","nullable":true,"type":"string"},{"metadata":{},"name":"_c2","nullable":true,"type":"string"}],"type":"struct"},"tableIdentifier":null}],"metadata":{"isDbfsCommandResult":false}},"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":1733855035278,"submitTime":1733855035264,"finishTime":1733855050756,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[["ansi",439]],"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"0bc118bb-b811-490d-a25e-d24941f403cd"},{"version":"CommandV1","origId":2636093781425844,"guid":"5f0e52d3-446c-4b18-8d94-a78e8151c33e","subtype":"command","commandType":"auto","position":3.0,"command":"flight_df_header = (\n    spark.read.format(\"csv\")\n    .option(\"header\", \"true\")\n    .option(\"inferschema\", \"false\")\n    .option(\"mode\", \"FAILFAST\")\n    .load(\"/FileStore/tables/flight_data_pyspark.csv\")\n)\n\nflight_df_header.show(5)","commandVersion":5,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838782955,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"57254026-be2a-4cda-82a4-a885a38a42cf"},{"version":"CommandV1","origId":2636093781425845,"guid":"3d8ddcfb-071b-4542-8b84-3da817f6fbe8","subtype":"command","commandType":"auto","position":4.0,"command":"flight_df_header.printSchema()","commandVersion":3,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838782974,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"f7993c32-6f5c-4276-9803-f5c7ba962ef8"},{"version":"CommandV1","origId":2636093781425846,"guid":"761a807e-ce36-4616-9ac3-55e7fbbc04e5","subtype":"command","commandType":"auto","position":5.0,"command":"flight_df_schema = (\n    spark.read.format(\"csv\")\n    .option(\"header\", \"true\")\n    .option(\"inferschema\", \"true\")\n    .option(\"mode\", \"FAILFAST\")\n    .load(\"/FileStore/tables/flight_data_pyspark.csv\")\n)\n\nflight_df_schema.printSchema()","commandVersion":8,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838782993,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"cbe773f5-0e7a-4b96-bc86-0bdfeaf8ede8"},{"version":"CommandV1","origId":2636093781425847,"guid":"3b66122e-bd36-4e23-a767-b8a617895e0b","subtype":"command","commandType":"auto","position":6.0,"command":"from pyspark.sql.types import StructField, StructType, IntegerType, StringType\n\nmy_schema = StructType([\n  StructField(\"DEST_COUNTRY_NAME\", StringType(), True),\n  StructField(\"ORIGIN_COUNTRY_NAME\", StringType(), True),\n  StructField(\"count\", IntegerType(), True)\n])\n\nflight_db = spark.read.format(\"csv\")\\\n                      .option(\"inferschema\", \"false\")\\\n                      .option(\"skipRows\", 1)\\\n                      .option(\"header\", \"false\")\\\n                      .option(\"mode\", \"PERMISSIVE\")\\\n                      .schema(my_schema)\\\n                      .load(\"/FileStore/tables/flight_data_pyspark.csv\")\n\nflight_db.show(5)","commandVersion":72,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838783045,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"c113f2b0-ec4a-4776-821d-bcef07492c7d"},{"version":"CommandV1","origId":2636093781425848,"guid":"06804fe7-19fe-46b3-b367-a2293dfb84a0","subtype":"command","commandType":"auto","position":0.25,"command":"%md\n## 1. Reading CSV in Spark","commandVersion":2,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"c2e7837c-56cd-4ca5-8e84-52897ab484b7"},{"version":"CommandV1","origId":2636093781425849,"guid":"bdd8b328-abf6-43b9-9329-a269ebdec3bf","subtype":"command","commandType":"auto","position":5.5,"command":"%md\n## 2. Creating Manual Schema\n\n\nThere are two ways to create schema:\n1. Struct Type - Struct Field\n2. DDL\n\n\nTask - We will explicity provide the Schema(which has the header of the data), with PERMISSIVE mode.\n\n\n**skipRows:** this is done to remove the first row, which includes all the column names, since we have provided the schema explicitly\\","commandVersion":21,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":true,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"16d5c63a-cd15-4bc2-af1e-03acd41c7467"},{"version":"CommandV1","origId":2636093781425850,"guid":"378ef9d7-d99a-4057-a636-2370e4323c23","subtype":"command","commandType":"auto","position":7.0,"command":"employee_df1 = spark.read.format(\"csv\")\\\n                        .option(\"inferschema\", \"true\")\\\n                        .option(\"header\", \"true\")\\\n                        .option(\"mode\", \"PERMISSIVE\")\\\n                        .load(\"/FileStore/tables/employee.csv\")\n\nemployee_df1.show()                        ","commandVersion":26,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838783098,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"dbe35a3e-164a-468a-962d-dd416a0399b9"},{"version":"CommandV1","origId":2636093781425851,"guid":"405179cd-72a5-4718-bcb5-b639e88b6191","subtype":"command","commandType":"auto","position":6.5,"command":"%md\n## 3. Handling Corrupted Record in Spark\n\nWhen do we say our record is corrupted?\n1. JSON - the {, } braces are not closed properly.\n2. CSV - There are 5 fields expected, so we must have 5 comma separated values. But one of the fields(e.g., address) may have commas in itself. \n\nThus, in different modes, following will the behaivor be:\n1. PERMISSIVE - all the records will be there, and all the corrupted values will be replaced with NULL.\n2. FAILFAST - will drop the entire record even if one of the fields have a corrupted value. \n3. DROPMALFOMRED - only the corrupted rows will be dropped.","commandVersion":30,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"2bb52bc8-48e9-4a35-ac64-b85d5762dcee"},{"version":"CommandV1","origId":2636093781425852,"guid":"51ae47ef-f0ab-449e-b199-c8f874b04e10","subtype":"command","commandType":"auto","position":8.0,"command":"employee_df2 = spark.read.format(\"csv\")\\\n                        .option(\"inferschema\", \"true\")\\\n                        .option(\"header\", \"true\")\\\n                        .option(\"mode\", \"FAILFAST\")\\\n                        .load(\"/FileStore/tables/employee.csv\")\n\nemployee_df2.show()                        ","commandVersion":6,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838783116,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"19bfa43a-aaed-47c6-90de-e8214bf0deb4"},{"version":"CommandV1","origId":2636093781425853,"guid":"4440be58-0370-46d8-990c-11f25ba423a4","subtype":"command","commandType":"auto","position":9.0,"command":"employee_df3 = spark.read.format(\"csv\")\\\n                        .option(\"inferschema\", \"true\")\\\n                        .option(\"header\", \"true\")\\\n                        .option(\"mode\", \"DROPMALFORMED\")\\\n                        .load(\"/FileStore/tables/employee.csv\")","commandVersion":4,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838783135,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"7b72c657-f3fd-4477-a20a-f8f496d32394"},{"version":"CommandV1","origId":2636093781425854,"guid":"bc2913ca-c5be-41e1-926c-bca08b33b0e5","subtype":"command","commandType":"auto","position":10.0,"command":"\n# Printing the corrupted records\nfrom pyspark.sql.types import *\n\nemp_schema = StructType(\n  [\n    StructField(\"id\", IntegerType(), True),\n    StructField(\"name\", StringType(), True),\n    StructField(\"age\", IntegerType(), True),\n    StructField(\"salary\", IntegerType(), True),\n    StructField(\"address\", StringType(), True),\n    StructField(\"nominee\", StringType(), True),\n    StructField(\"_corrupt_record\", StringType(), True)\n  ]\n)\n\nemployee_df = spark.read.format(\"csv\")\\\n                        .option(\"inferschema\", \"true\")\\\n                        .option(\"header\", \"true\")\\\n                        .option(\"mode\", \"PERMISSIVE\")\\\n                        .schema(emp_schema)\\\n                        .load(\"/FileStore/tables/employee.csv\")\n\nemployee_df.show(truncate=False)    ","commandVersion":33,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838783184,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"92d4a9e5-4212-4ea0-bdda-8683f59e0759"},{"version":"CommandV1","origId":2636093781425855,"guid":"4d6b700e-9855-4bbd-8329-b6d9c28662dd","subtype":"command","commandType":"auto","position":9.5,"command":"%md\nThus, we observe:\n1. PERMISSIVE will replace corrupt values with null.\n2. FAILFAST will show error if any corrupt value is there.\n3. DROPMALFORMED will show only the non-corrupt rows.","commandVersion":5,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"ff229810-2265-461b-bdb6-039cd2c7e29a"},{"version":"CommandV1","origId":2636093781425856,"guid":"ee13472b-38fb-4ec2-a01c-c493cad85645","subtype":"command","commandType":"auto","position":11.0,"command":"# Storing all the corrupt records in a file\nemployee_df = spark.read.format(\"csv\")\\\n                        .option(\"inferschema\", \"true\")\\\n                        .option(\"header\", \"true\")\\\n                        .option(\"badRecordsPath\", \"/FileStore/tables/corrupt_records_employee\")\\\n                        .load(\"/FileStore/tables/employee.csv\")\n\nemployee_df.show(truncate=False)","commandVersion":21,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838783199,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"012ac720-2c9d-45f1-9f74-07253c41ed5b"},{"version":"CommandV1","origId":2636093781425857,"guid":"60ab7523-7c72-404a-8b99-7ad6c6733328","subtype":"command","commandType":"auto","position":12.0,"command":"%fs\nls /FileStore/tables","commandVersion":6,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838783217,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"93ad0768-0d48-4565-a7dd-321a551d2547"},{"version":"CommandV1","origId":2636093781425858,"guid":"2f99c39f-f1bb-4b49-97f3-ec1f3d287dbe","subtype":"command","commandType":"auto","position":13.0,"command":"%fs\nls /FileStore/tables/corrupt_records_employee/","commandVersion":5,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838783236,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"e11c69d9-a367-4230-824f-c6184b690e81"},{"version":"CommandV1","origId":2636093781425859,"guid":"51882c98-2ab5-4798-9933-983ff0aac765","subtype":"command","commandType":"auto","position":14.0,"command":"%fs\nls /FileStore/tables/corrupt_records_employee//20241208T153124/bad_records","commandVersion":8,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838783256,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"68209b02-6b94-4845-ac27-bb3bf821b303"},{"version":"CommandV1","origId":2636093781425860,"guid":"c85f19ca-1c23-4260-bd91-7fbc0812484d","subtype":"command","commandType":"auto","position":15.0,"command":"corrupt_data_df = spark.read.format(\"json\").load(\"/FileStore/tables/corrupt_records_employee//20241208T153124/bad_records\")\ncorrupt_data_df.show(truncate=False)","commandVersion":10,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838783277,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"4b132ed6-0898-4ac8-9844-5c9a1896afe2"},{"version":"CommandV1","origId":2636093781425861,"guid":"91e27e44-d02f-482e-ae44-aeb720719b93","subtype":"command","commandType":"auto","position":16.0,"command":"spark.read.format(\"json\")\\\n          .option(\"inferschema\", \"true\")\\\n          .option(\"mode\", \"PERMISSIVE\")\\\n          .load(\"/FileStore/tables/line_deliminated_json.json\").show(truncate=False)\n","commandVersion":29,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838783344,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"10828c68-e564-4289-9ff0-f977cf2536fb"},{"version":"CommandV1","origId":2636093781425862,"guid":"d4fdeb8a-1dda-4417-b290-b5fbaffe88cf","subtype":"command","commandType":"auto","position":15.5,"command":"%md\n## 4. Reading JSON file in Spark\n\n1. File uploaded to /FileStore/tables/multiline_correct.json\n2. File uploaded to /FileStore/tables/multiline_incorrect.json\n3. File uploaded to /FileStore/tables/line_deliminated_json.json\n4. File uploaded to /FileStore/tables/line_deliminated_json_extrafield.json\n5. File uploaded to /FileStore/tables/corrupted.json\n\n**Note:** Line-deliminated works faster than Multiline\n","commandVersion":14,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"315d6812-65ed-4858-a0c4-8c1667bc9628"},{"version":"CommandV1","origId":2636093781425863,"guid":"1ec6dbc9-06e6-4d8c-9e9c-93c28751fb88","subtype":"command","commandType":"auto","position":17.0,"command":"spark.read.format(\"json\")\\\n          .option(\"inferschema\", \"true\")\\\n          .option(\"mode\", \"PERMISSIVE\")\\\n          .load(\"/FileStore/tables/line_deliminated_json_extrafield.json\").show(truncate=False)","commandVersion":2,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838783360,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"168884ba-3c51-4932-9f31-9d366b673f31"},{"version":"CommandV1","origId":2636093781425864,"guid":"d49d19b2-6251-429f-a1ec-72359f972a02","subtype":"command","commandType":"auto","position":18.0,"command":"spark.read.format(\"json\")\\\n          .option(\"inferschema\", \"true\")\\\n          .option(\"mode\", \"PERMISSIVE\")\\\n          .option(\"multiline\", \"true\")\\\n          .load(\"/FileStore/tables/multiline_correct.json\").show(truncate=False)","commandVersion":4,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838783408,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"5e179fcb-ba7b-4004-8d6f-8c28fcf8f512"},{"version":"CommandV1","origId":2636093781425865,"guid":"95a30fa6-741a-445a-8110-174102ba14db","subtype":"command","commandType":"auto","position":17.5,"command":"%md\n**Note:** If our data is multiline, we must specify it in the option, else we will be getting an error.\n`.option(\"multiline\", \"true\")`","commandVersion":7,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"d52e1782-52ae-4967-890e-c39ba7186308"},{"version":"CommandV1","origId":2636093781425866,"guid":"4d394911-94b9-4a6d-aa5d-6502f0a540a0","subtype":"command","commandType":"auto","position":19.0,"command":"spark.read.format(\"json\")\\\n          .option(\"inferschema\", \"true\")\\\n          .option(\"mode\", \"PERMISSIVE\")\\\n          .option(\"multiline\", \"true\")\\\n          .load(\"/FileStore/tables/multiline_incorrect.json\").show(truncate=False)","commandVersion":2,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838783452,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"eebaad73-9d69-47e4-88e8-ed82beb62303"},{"version":"CommandV1","origId":2636093781425867,"guid":"b14a5373-ae82-4afc-954d-b96a49b331a0","subtype":"command","commandType":"auto","position":20.0,"command":"spark.read.format(\"json\")\\\n          .option(\"inferschema\", \"true\")\\\n          .option(\"mode\", \"PERMISSIVE\")\\\n          .load(\"/FileStore/tables/corrupted.json\").show(truncate=False)","commandVersion":3,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838783470,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"e9d54af8-782b-4c2b-b7ec-af174533be3e"},{"version":"CommandV1","origId":2636093781425868,"guid":"bfe54053-1543-485c-91d4-5acc61c9c9ca","subtype":"command","commandType":"auto","position":18.5,"command":"%md\n**Note:** Multiline JSON must always be passed as a list. Else, only the first element(like below) will be printed.","commandVersion":5,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"888393f8-cd31-4796-a629-e215e40dd543"},{"version":"CommandV1","origId":2636093781425869,"guid":"855400c0-8c1a-4fcb-a128-5805d2d176ae","subtype":"command","commandType":"auto","position":21.0,"command":"df = spark.read.format(\"parquet\").load(\"/FileStore/tables/flight_data.parquet\")\ndf.show()","commandVersion":4,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838783514,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"ceb345a8-2b97-4d71-8974-0f9ee79366ea"},{"version":"CommandV1","origId":2800841797259768,"guid":"afc70561-1669-4632-be4d-5b32f4fa1bea","subtype":"command","commandType":"auto","position":26.75,"command":"%md\n## 7. Partitioning\n\nPartitioning is a technique using which we can partition data into different files based up on a columns value. For eg., we need to store data for all `INDIANS` in one file, `RUSSIANS` in another, etc. This is useful for cases when we have t filter data and work on a specific section of dataset only.\n\nIf we partition a data on the value of column having only unique values, \n`# of partitions == # of rows`\n\n**Note:** The order in which the partiitonBy values are written matters.","commandVersion":20,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"7b64aab8-b6ca-4804-8c0f-c6078baca259"},{"version":"CommandV1","origId":2800841797259769,"guid":"69e47e48-4f6e-4418-b82a-223189d4673b","subtype":"command","commandType":"auto","position":27.75,"command":"df.write.format(\"csv\")\\\n        .option(\"header\", \"true\")\\\n        .option(\"path\", \"/FileStore/tables/partition_by_gender_address\")\\\n        .option(\"mode\", \"overwrite\")\\\n        .partitionBy(\"gender\", \"address\")\\\n        .save()","commandVersion":32,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838783778,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"37ef954e-8be6-4a68-b235-25a8694e8b05"},{"version":"CommandV1","origId":2800841797259773,"guid":"cff9df91-7b62-4510-9e51-fc8ae4ed784d","subtype":"command","commandType":"auto","position":31.75,"command":"dbutils.fs.ls(\"/FileStore/tables/partition_by_gender_address\")","commandVersion":6,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838783794,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"eb3d98c3-eddb-4b30-889e-8ba33cc3c02b"},{"version":"CommandV1","origId":2800841797259776,"guid":"29326f2b-0c2e-4db8-a865-9cdb57e0f57c","subtype":"command","commandType":"auto","position":34.75,"command":"dbutils.fs.ls(\"/FileStore/tables/partition_by_gender_address/gender=f/\")","commandVersion":4,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838783812,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"dffdff23-84c8-4e31-bbdb-032f974d7940"},{"version":"CommandV1","origId":2800841797259777,"guid":"c9bcc621-e3f0-4984-8964-b7c4a2020649","subtype":"command","commandType":"auto","position":35.75,"command":"df.write.format(\"csv\")\\\n        .option(\"header\", \"true\")\\\n        .option(\"path\", \"/FileStore/tables/bucket_by_id\")\\\n        .bucketBy(3, \"id\")\\\n        .saveAsTable(name=\"bucket_by_id_table\")","commandVersion":24,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838783845,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"fefb2032-fad0-440f-9871-c10e302fd6cb"},{"version":"CommandV1","origId":2800841797259778,"guid":"34eb4fc3-6810-4b4f-bf6f-f2ff74b4fd52","subtype":"command","commandType":"auto","position":35.25,"command":"%md\n## 8. Bucketing in Spark\n\nBucket is used to divide and store the data in equal size chunks.\n\nIn cases where partitioning does not help, for eg., when `# of partitions = # of rows` (the column is unique), we can instead do bucketing.\n\n**Note:** if we use `.save()`, we will get error: `AnalysisException: 'save' does not support bucketBy right now.`. So, instead of `.save()` we do: `.saveAsTable(name=\"__name__\")`.","commandVersion":34,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"6bacbd4b-0236-458e-a23b-22db57face33"},{"version":"CommandV1","origId":2800841797259779,"guid":"68817a04-e5a7-404a-bcc9-ce58b8316a40","subtype":"command","commandType":"auto","position":36.75,"command":"dbutils.fs.ls(\"/FileStore/tables/bucket_by_id\")","commandVersion":2,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838783863,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"8554fd68-61d4-4419-823c-ab67347e52fc"},{"version":"CommandV1","origId":2800841797259780,"guid":"84418ecf-04b4-49ba-bb0e-0de2e8746ad5","subtype":"command","commandType":"auto","position":37.75,"command":"data = [\n  (1, \"Tia\"),\n  (2, \"Ria\")\n]\n\nschema = [\"id\", \"name\"]\n\nmy_df = spark.createDataFrame(data=data, schema=schema)\nmy_df.show()  ","commandVersion":17,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838783903,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"55a96c46-829c-4b13-bcc5-0dbc56695eb6"},{"version":"CommandV1","origId":2800841797259781,"guid":"4c0d8d78-c468-4578-9ca6-c90754d04b91","subtype":"command","commandType":"auto","position":37.25,"command":"%md\n## 9. Create DataFrame in Spark\n\n**Schema** is defined as **Column Name** + **Column Datatype**","commandVersion":11,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"7543a750-b57c-4f77-86bc-0322df951612"},{"version":"CommandV1","origId":2800841797259782,"guid":"2a8ae6e6-0812-45ef-8895-bd3bc0942f7e","subtype":"command","commandType":"auto","position":38.75,"command":"from pyspark.sql.types import *\n\nemp_schema = StructType([\n  StructField(\"id\", IntegerType(), True),\n  StructField(\"name\", StringType(), True),\n  StructField(\"age\", IntegerType(), True),\n  StructField(\"salary\", IntegerType(), True),\n  StructField(\"address\", StringType(), True),\n  StructField(\"nominee\", StringType(), True),\n  StructField(\"_corrupt_record\", StringType(), True),\n])\n\nemployee_df = spark.read.format(\"csv\")\\\n                        .option(\"inferschema\", \"true\")\\\n                        .option(\"header\", \"true\")\\\n                        .option(\"mode\", \"PERMISSIVE\")\\\n                        .schema(emp_schema)\\\n                        .load(\"/FileStore/tables/employee.csv\")\n\nemployee_df.show()                  ","commandVersion":67,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838783935,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"f4ab8d7d-9ba1-4360-836d-3e92ba61dd02"},{"version":"CommandV1","origId":2800841797259783,"guid":"f06c3885-f239-4d52-b401-0d150d266a1f","subtype":"command","commandType":"auto","position":38.25,"command":"%md\n## 10. DataFrame Transformations in Spark","commandVersion":2,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"77bf9567-1af4-4793-afbc-cfbb2ed3a495"},{"version":"CommandV1","origId":3288334635067142,"guid":"2e3cbeef-2c49-453a-80fc-f74e740ba124","subtype":"command","commandType":"auto","position":20.5,"command":"%md\n## 5. Reading Parquet in Spark\n\n\nWhat is Parquet?\n* Columnar based file format -> data is filled in the tables in a column-wise fashion. That is, all entries of col1, followed by col2.. etc\n* In big data, we are required to **write data once, read data many times.** So if we have a row based file format(CSV, JSON, Text files), the data stored in the continuous memory location will be `row1col1_val, row1col2_val, row1col3_val,..., row2col1_val, row2col2_val, row2col3_val,...`, while in columnar based file format, the data is stored like `col1_row1_val, col1_row2, ..., col2_row1_val, col2_row2, ...,`. Thus, all the data associated with one specific column is present in contiguous manner. So, less time and load in retreival will be taken.\n* Data is present in a abinary file format, which isn't human-readable.\n\nIf we have so much processing time wasted in row based file format, then why do we need it?\n* OLAP - Online Analytical Processing. When we need to only read data of few columns, we use columnar based file formatting. \n* OLTP - Online Transactional Processing. When we need to write data(insert, update, delete) in the file, it will be easy to write the values if for each row, the data can be stored contiguously. So, in such a case, we use OLTP.\n\n**Note:** Our aim is:\n1. Cost reduce\n2. Time for lookup reduce \n3. Performance increase\n\n**We don't need to provide any info related to inferschema, etc. because it has enough metadata on its own.**","commandVersion":104,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"03036fd7-78c0-4e45-8e72-490ce5792fdd"},{"version":"CommandV1","origId":3288334635067143,"guid":"c0ff5674-e9ca-48ce-8f02-b5a346b8a675","subtype":"command","commandType":"auto","position":22.0,"command":"df = spark.read.format(\"csv\").option(\"header\", \"true\").load(\"/FileStore/tables/employee_write_data.csv\")\n\ndf.show()               ","commandVersion":19,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838783567,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"fc7e4715-9604-4f90-a6dc-7b3b15829eaa"},{"version":"CommandV1","origId":3288334635067145,"guid":"5abdf2c5-0225-4b57-85b6-4208de8e8d2c","subtype":"command","commandType":"auto","position":21.75,"command":"%md\n## 6. How to  write dataframe to disk in Spark? \n\nSyntax - `DataFrameWriter.format().option().partitionBy().bucketBy().save()`\n\n**Note:** We can provide the path location in `.save()` or in `.option()`.\n\nModes in DataframeWriter API\n* Append - adds the new file to the location\n* Overwrite - deletes the older file and adds the current file\n* errorIfExists -  If file is already found in the location, it will return an error that we won't be able to write in the same location since the file already exists. \n* ignore - ignores the older file and doesn't write anything about the current file sent to be saved in that location.","commandVersion":48,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"aa4b56df-119d-4193-9a75-9e1a372576a7"},{"version":"CommandV1","origId":3288334635067146,"guid":"86314b67-ef88-4dc3-9dd1-23a9515192bc","subtype":"command","commandType":"auto","position":23.0,"command":"df.write.format(\"csv\")\\\n        .option(\"header\", \"true\")\\\n        .option(\"mode\", \"overwrite\")\\\n        .option(\"path\", \"/FileStore/tables/csv_write\")\\\n        .save()","commandVersion":13,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838783585,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"6844b176-156d-49b7-881e-f0d640c05611"},{"version":"CommandV1","origId":3288334635067147,"guid":"c482ca0e-ecdc-41b2-94f5-27664fecfacd","subtype":"command","commandType":"auto","position":24.0,"command":"# Check if the file is present\ndbutils.fs.ls(\"/FileStore/tables/csv_write/\")","commandVersion":9,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838783626,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"a1eb1550-d8fc-4ba4-808f-92de8c2bb954"},{"version":"CommandV1","origId":3288334635067148,"guid":"3b767c8c-1a25-4281-823d-e0a701ee17f1","subtype":"command","commandType":"auto","position":25.0,"command":"df.repartition(3).write.format(\"csv\")\\\n        .option(\"header\", \"true\")\\\n        .option(\"mode\", \"overwrite\")\\\n        .option(\"path\", \"/FileStore/tables/csv_write_repartition\")\\\n        .save()","commandVersion":7,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838783667,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"e1dd13f1-091c-4f0f-b6bd-c4fb8bed739d"},{"version":"CommandV1","origId":3288334635067149,"guid":"a199a73a-8c50-4c00-94bd-33d76b15b67a","subtype":"command","commandType":"auto","position":24.5,"command":"%md\n### Repartition\nIn this, we will write the file in 3 separate partitions","commandVersion":11,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"62d35b5b-b8c8-48e1-ad40-cb9068db4fb3"},{"version":"CommandV1","origId":3288334635067150,"guid":"66f87023-2636-470c-b525-3908b041142d","subtype":"command","commandType":"auto","position":26.0,"command":"dbutils.fs.ls(\"/FileStore/tables/csv_write_repartition\")","commandVersion":2,"state":"error","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"Command skipped","errorTraceType":"html","error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":1733838783683,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"621e88ce-6455-46ac-80fb-1891435e4539"},{"version":"CommandV1","origId":3288334635067152,"guid":"f1cccaa4-4a74-48fb-b79d-0759b169734e","subtype":"command","commandType":"auto","position":26.5,"command":"%md\nWe can thus see, that 3 separate files are created.","commandVersion":1,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"15a00efe-210d-44bf-9f47-6871803bb2f9"}],"dashboards":[],"guid":"b3a5419f-ac9e-44f7-9a64-a28e77dda516","globalVars":{},"iPythonMetadata":null,"inputWidgets":{},"notebookMetadata":{"pythonIndentUnit":4,"mostRecentlyExecutedCommandWithImplicitDF":{"commandId":2636093781425859,"dataframes":["_sqldf"]}},"reposExportFormat":"SOURCE","environmentMetadata":null}